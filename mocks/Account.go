// Code generated by mockery v2.0.0-alpha.2. DO NOT EDIT.

package mocks

import (
	big "math/big"

	api "github.com/gagarinchain/common/api"

	common "github.com/gagarinchain/common/eth/common"

	mock "github.com/stretchr/testify/mock"

	pb "github.com/gagarinchain/common/protobuff"
)

// Account is an autogenerated mock type for the Account type
type Account struct {
	mock.Mock
}

// Balance provides a mock function with given fields:
func (_m *Account) Balance() *big.Int {
	ret := _m.Called()

	var r0 *big.Int
	if rf, ok := ret.Get(0).(func() *big.Int); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*big.Int)
		}
	}

	return r0
}

// Copy provides a mock function with given fields:
func (_m *Account) Copy() api.Account {
	ret := _m.Called()

	var r0 api.Account
	if rf, ok := ret.Get(0).(func() api.Account); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(api.Account)
		}
	}

	return r0
}

// IncrementNonce provides a mock function with given fields:
func (_m *Account) IncrementNonce() {
	_m.Called()
}

// Nonce provides a mock function with given fields:
func (_m *Account) Nonce() uint64 {
	ret := _m.Called()

	var r0 uint64
	if rf, ok := ret.Get(0).(func() uint64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint64)
	}

	return r0
}

// Origin provides a mock function with given fields:
func (_m *Account) Origin() common.Address {
	ret := _m.Called()

	var r0 common.Address
	if rf, ok := ret.Get(0).(func() common.Address); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(common.Address)
		}
	}

	return r0
}

// Serialize provides a mock function with given fields:
func (_m *Account) Serialize() []byte {
	ret := _m.Called()

	var r0 []byte
	if rf, ok := ret.Get(0).(func() []byte); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	return r0
}

// SetOrigin provides a mock function with given fields: origin
func (_m *Account) SetOrigin(origin common.Address) {
	_m.Called(origin)
}

// ToStorageProto provides a mock function with given fields:
func (_m *Account) ToStorageProto() *pb.Account {
	ret := _m.Called()

	var r0 *pb.Account
	if rf, ok := ret.Get(0).(func() *pb.Account); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pb.Account)
		}
	}

	return r0
}

// Voters provides a mock function with given fields:
func (_m *Account) Voters() []common.Address {
	ret := _m.Called()

	var r0 []common.Address
	if rf, ok := ret.Get(0).(func() []common.Address); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]common.Address)
		}
	}

	return r0
}
