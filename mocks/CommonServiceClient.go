// Code generated by mockery v2.0.0-alpha.2. DO NOT EDIT.

package mocks

import (
	context "context"

	grpc "google.golang.org/grpc"

	mock "github.com/stretchr/testify/mock"

	pb "github.com/gagarinchain/common/protobuff"
)

// CommonServiceClient is an autogenerated mock type for the CommonServiceClient type
type CommonServiceClient struct {
	mock.Mock
}

// Contains provides a mock function with given fields: ctx, in, opts
func (_m *CommonServiceClient) Contains(ctx context.Context, in *pb.ContainsRequest, opts ...grpc.CallOption) (*pb.ContainsResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *pb.ContainsResponse
	if rf, ok := ret.Get(0).(func(context.Context, *pb.ContainsRequest, ...grpc.CallOption) *pb.ContainsResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pb.ContainsResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *pb.ContainsRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ExecuteTransaction provides a mock function with given fields: ctx, in, opts
func (_m *CommonServiceClient) ExecuteTransaction(ctx context.Context, in *pb.ExecuteTransactionRequest, opts ...grpc.CallOption) (*pb.ExecuteTransactionResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *pb.ExecuteTransactionResponse
	if rf, ok := ret.Get(0).(func(context.Context, *pb.ExecuteTransactionRequest, ...grpc.CallOption) *pb.ExecuteTransactionResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pb.ExecuteTransactionResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *pb.ExecuteTransactionRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAccount provides a mock function with given fields: ctx, in, opts
func (_m *CommonServiceClient) GetAccount(ctx context.Context, in *pb.GetAccountRequest, opts ...grpc.CallOption) (*pb.GetAccountResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *pb.GetAccountResponse
	if rf, ok := ret.Get(0).(func(context.Context, *pb.GetAccountRequest, ...grpc.CallOption) *pb.GetAccountResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pb.GetAccountResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *pb.GetAccountRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetBlockByHash provides a mock function with given fields: ctx, in, opts
func (_m *CommonServiceClient) GetBlockByHash(ctx context.Context, in *pb.GetBlockByHashRequest, opts ...grpc.CallOption) (*pb.GetBlockByHashResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *pb.GetBlockByHashResponse
	if rf, ok := ret.Get(0).(func(context.Context, *pb.GetBlockByHashRequest, ...grpc.CallOption) *pb.GetBlockByHashResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pb.GetBlockByHashResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *pb.GetBlockByHashRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetBlocksByHeight provides a mock function with given fields: ctx, in, opts
func (_m *CommonServiceClient) GetBlocksByHeight(ctx context.Context, in *pb.GetBlockByHeightRequest, opts ...grpc.CallOption) (*pb.GetBlockByHeightResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *pb.GetBlockByHeightResponse
	if rf, ok := ret.Get(0).(func(context.Context, *pb.GetBlockByHeightRequest, ...grpc.CallOption) *pb.GetBlockByHeightResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pb.GetBlockByHeightResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *pb.GetBlockByHeightRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCommittee provides a mock function with given fields: ctx, in, opts
func (_m *CommonServiceClient) GetCommittee(ctx context.Context, in *pb.GetCommitteeRequest, opts ...grpc.CallOption) (*pb.GetCommitteeResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *pb.GetCommitteeResponse
	if rf, ok := ret.Get(0).(func(context.Context, *pb.GetCommitteeRequest, ...grpc.CallOption) *pb.GetCommitteeResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pb.GetCommitteeResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *pb.GetCommitteeRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCurrentEpoch provides a mock function with given fields: ctx, in, opts
func (_m *CommonServiceClient) GetCurrentEpoch(ctx context.Context, in *pb.GetCurrentEpochRequest, opts ...grpc.CallOption) (*pb.GetCurrentEpochResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *pb.GetCurrentEpochResponse
	if rf, ok := ret.Get(0).(func(context.Context, *pb.GetCurrentEpochRequest, ...grpc.CallOption) *pb.GetCurrentEpochResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pb.GetCurrentEpochResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *pb.GetCurrentEpochRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCurrentView provides a mock function with given fields: ctx, in, opts
func (_m *CommonServiceClient) GetCurrentView(ctx context.Context, in *pb.GetCurrentViewRequest, opts ...grpc.CallOption) (*pb.GetCurrentViewResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *pb.GetCurrentViewResponse
	if rf, ok := ret.Get(0).(func(context.Context, *pb.GetCurrentViewRequest, ...grpc.CallOption) *pb.GetCurrentViewResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pb.GetCurrentViewResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *pb.GetCurrentViewRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetFork provides a mock function with given fields: ctx, in, opts
func (_m *CommonServiceClient) GetFork(ctx context.Context, in *pb.GetForkRequest, opts ...grpc.CallOption) (*pb.GetForkResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *pb.GetForkResponse
	if rf, ok := ret.Get(0).(func(context.Context, *pb.GetForkRequest, ...grpc.CallOption) *pb.GetForkResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pb.GetForkResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *pb.GetForkRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetGenesisBlock provides a mock function with given fields: ctx, in, opts
func (_m *CommonServiceClient) GetGenesisBlock(ctx context.Context, in *pb.GetGenesisBlockRequest, opts ...grpc.CallOption) (*pb.GetGenesisBlockResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *pb.GetGenesisBlockResponse
	if rf, ok := ret.Get(0).(func(context.Context, *pb.GetGenesisBlockRequest, ...grpc.CallOption) *pb.GetGenesisBlockResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pb.GetGenesisBlockResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *pb.GetGenesisBlockRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetHead provides a mock function with given fields: ctx, in, opts
func (_m *CommonServiceClient) GetHead(ctx context.Context, in *pb.GetHeadRequest, opts ...grpc.CallOption) (*pb.GetHeadResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *pb.GetHeadResponse
	if rf, ok := ret.Get(0).(func(context.Context, *pb.GetHeadRequest, ...grpc.CallOption) *pb.GetHeadResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pb.GetHeadResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *pb.GetHeadRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetProposerForView provides a mock function with given fields: ctx, in, opts
func (_m *CommonServiceClient) GetProposerForView(ctx context.Context, in *pb.GetProposerForViewRequest, opts ...grpc.CallOption) (*pb.GetProposerForViewResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *pb.GetProposerForViewResponse
	if rf, ok := ret.Get(0).(func(context.Context, *pb.GetProposerForViewRequest, ...grpc.CallOption) *pb.GetProposerForViewResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pb.GetProposerForViewResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *pb.GetProposerForViewRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetThreeChain provides a mock function with given fields: ctx, in, opts
func (_m *CommonServiceClient) GetThreeChain(ctx context.Context, in *pb.GetThreeChainRequest, opts ...grpc.CallOption) (*pb.GetThreeChainResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *pb.GetThreeChainResponse
	if rf, ok := ret.Get(0).(func(context.Context, *pb.GetThreeChainRequest, ...grpc.CallOption) *pb.GetThreeChainResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pb.GetThreeChainResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *pb.GetThreeChainRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTopCommittedBlock provides a mock function with given fields: ctx, in, opts
func (_m *CommonServiceClient) GetTopCommittedBlock(ctx context.Context, in *pb.GetTopCommittedBlockRequest, opts ...grpc.CallOption) (*pb.GetTopCommittedBlockResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *pb.GetTopCommittedBlockResponse
	if rf, ok := ret.Get(0).(func(context.Context, *pb.GetTopCommittedBlockRequest, ...grpc.CallOption) *pb.GetTopCommittedBlockResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pb.GetTopCommittedBlockResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *pb.GetTopCommittedBlockRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTopHeight provides a mock function with given fields: ctx, in, opts
func (_m *CommonServiceClient) GetTopHeight(ctx context.Context, in *pb.GetTopHeightRequest, opts ...grpc.CallOption) (*pb.GetTopHeightResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *pb.GetTopHeightResponse
	if rf, ok := ret.Get(0).(func(context.Context, *pb.GetTopHeightRequest, ...grpc.CallOption) *pb.GetTopHeightResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pb.GetTopHeightResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *pb.GetTopHeightRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTopHeightBlock provides a mock function with given fields: ctx, in, opts
func (_m *CommonServiceClient) GetTopHeightBlock(ctx context.Context, in *pb.GetTopHeightBlockRequest, opts ...grpc.CallOption) (*pb.GetTopHeightBlockResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *pb.GetTopHeightBlockResponse
	if rf, ok := ret.Get(0).(func(context.Context, *pb.GetTopHeightBlockRequest, ...grpc.CallOption) *pb.GetTopHeightBlockResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pb.GetTopHeightBlockResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *pb.GetTopHeightBlockRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTransaction provides a mock function with given fields: ctx, in, opts
func (_m *CommonServiceClient) GetTransaction(ctx context.Context, in *pb.GetTransactionRequest, opts ...grpc.CallOption) (*pb.GetTransactionResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *pb.GetTransactionResponse
	if rf, ok := ret.Get(0).(func(context.Context, *pb.GetTransactionRequest, ...grpc.CallOption) *pb.GetTransactionResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pb.GetTransactionResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *pb.GetTransactionRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IsSibling provides a mock function with given fields: ctx, in, opts
func (_m *CommonServiceClient) IsSibling(ctx context.Context, in *pb.IsSiblingRequest, opts ...grpc.CallOption) (*pb.IsSiblingResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *pb.IsSiblingResponse
	if rf, ok := ret.Get(0).(func(context.Context, *pb.IsSiblingRequest, ...grpc.CallOption) *pb.IsSiblingResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pb.IsSiblingResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *pb.IsSiblingRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
