// Code generated by mockery v2.0.0-alpha.2. DO NOT EDIT.

package mocks

import (
	common "github.com/gagarinchain/common/eth/common"
	crypto "github.com/gagarinchain/common/eth/crypto"

	mock "github.com/stretchr/testify/mock"

	pb "github.com/gagarinchain/common/protobuff"
)

// SynchronizeCertificate is an autogenerated mock type for the SynchronizeCertificate type
type SynchronizeCertificate struct {
	mock.Mock
}

// GetHash provides a mock function with given fields:
func (_m *SynchronizeCertificate) GetHash() common.Hash {
	ret := _m.Called()

	var r0 common.Hash
	if rf, ok := ret.Get(0).(func() common.Hash); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(common.Hash)
		}
	}

	return r0
}

// GetMessage provides a mock function with given fields:
func (_m *SynchronizeCertificate) GetMessage() *pb.SynchronizeCertificate {
	ret := _m.Called()

	var r0 *pb.SynchronizeCertificate
	if rf, ok := ret.Get(0).(func() *pb.SynchronizeCertificate); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pb.SynchronizeCertificate)
		}
	}

	return r0
}

// Height provides a mock function with given fields:
func (_m *SynchronizeCertificate) Height() int32 {
	ret := _m.Called()

	var r0 int32
	if rf, ok := ret.Get(0).(func() int32); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int32)
	}

	return r0
}

// IsValid provides a mock function with given fields: qcHash, committee
func (_m *SynchronizeCertificate) IsValid(qcHash common.Hash, committee []*crypto.PublicKey) (bool, error) {
	ret := _m.Called(qcHash, committee)

	var r0 bool
	if rf, ok := ret.Get(0).(func(common.Hash, []*crypto.PublicKey) bool); ok {
		r0 = rf(qcHash, committee)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(common.Hash, []*crypto.PublicKey) error); ok {
		r1 = rf(qcHash, committee)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SignatureAggregate provides a mock function with given fields:
func (_m *SynchronizeCertificate) SignatureAggregate() *crypto.SignatureAggregate {
	ret := _m.Called()

	var r0 *crypto.SignatureAggregate
	if rf, ok := ret.Get(0).(func() *crypto.SignatureAggregate); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*crypto.SignatureAggregate)
		}
	}

	return r0
}

// ToStorageProto provides a mock function with given fields:
func (_m *SynchronizeCertificate) ToStorageProto() *pb.SynchronizeCertificate {
	ret := _m.Called()

	var r0 *pb.SynchronizeCertificate
	if rf, ok := ret.Get(0).(func() *pb.SynchronizeCertificate); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pb.SynchronizeCertificate)
		}
	}

	return r0
}
