// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.6.1
// source: api.proto

package pb

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type OnBlockCommitRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Me      *Peer     `protobuf:"bytes,1,opt,name=me,proto3" json:"me,omitempty"`
	Block   *BlockS   `protobuf:"bytes,2,opt,name=block,proto3" json:"block,omitempty"`
	Orphans []*BlockS `protobuf:"bytes,3,rep,name=orphans,proto3" json:"orphans,omitempty"`
}

func (x *OnBlockCommitRequest) Reset() {
	*x = OnBlockCommitRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OnBlockCommitRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OnBlockCommitRequest) ProtoMessage() {}

func (x *OnBlockCommitRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OnBlockCommitRequest.ProtoReflect.Descriptor instead.
func (*OnBlockCommitRequest) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{0}
}

func (x *OnBlockCommitRequest) GetMe() *Peer {
	if x != nil {
		return x.Me
	}
	return nil
}

func (x *OnBlockCommitRequest) GetBlock() *BlockS {
	if x != nil {
		return x.Block
	}
	return nil
}

func (x *OnBlockCommitRequest) GetOrphans() []*BlockS {
	if x != nil {
		return x.Orphans
	}
	return nil
}

type OnBlockCommitResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *OnBlockCommitResponse) Reset() {
	*x = OnBlockCommitResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OnBlockCommitResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OnBlockCommitResponse) ProtoMessage() {}

func (x *OnBlockCommitResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OnBlockCommitResponse.ProtoReflect.Descriptor instead.
func (*OnBlockCommitResponse) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{1}
}

type BeforeProposedBlockAddedRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Me       *Peer            `protobuf:"bytes,1,opt,name=me,proto3" json:"me,omitempty"`
	Proposal *ProposalPayload `protobuf:"bytes,2,opt,name=proposal,proto3" json:"proposal,omitempty"`
}

func (x *BeforeProposedBlockAddedRequest) Reset() {
	*x = BeforeProposedBlockAddedRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BeforeProposedBlockAddedRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BeforeProposedBlockAddedRequest) ProtoMessage() {}

func (x *BeforeProposedBlockAddedRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BeforeProposedBlockAddedRequest.ProtoReflect.Descriptor instead.
func (*BeforeProposedBlockAddedRequest) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{2}
}

func (x *BeforeProposedBlockAddedRequest) GetMe() *Peer {
	if x != nil {
		return x.Me
	}
	return nil
}

func (x *BeforeProposedBlockAddedRequest) GetProposal() *ProposalPayload {
	if x != nil {
		return x.Proposal
	}
	return nil
}

type BeforeProposedBlockAddedResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Proposal *ProposalPayload `protobuf:"bytes,1,opt,name=proposal,proto3" json:"proposal,omitempty"`
}

func (x *BeforeProposedBlockAddedResponse) Reset() {
	*x = BeforeProposedBlockAddedResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BeforeProposedBlockAddedResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BeforeProposedBlockAddedResponse) ProtoMessage() {}

func (x *BeforeProposedBlockAddedResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BeforeProposedBlockAddedResponse.ProtoReflect.Descriptor instead.
func (*BeforeProposedBlockAddedResponse) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{3}
}

func (x *BeforeProposedBlockAddedResponse) GetProposal() *ProposalPayload {
	if x != nil {
		return x.Proposal
	}
	return nil
}

type AfterProposedBlockAddedRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Me       *Peer            `protobuf:"bytes,1,opt,name=me,proto3" json:"me,omitempty"`
	Proposal *ProposalPayload `protobuf:"bytes,2,opt,name=proposal,proto3" json:"proposal,omitempty"`
	Receipts []*Receipt       `protobuf:"bytes,3,rep,name=receipts,proto3" json:"receipts,omitempty"`
}

func (x *AfterProposedBlockAddedRequest) Reset() {
	*x = AfterProposedBlockAddedRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AfterProposedBlockAddedRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AfterProposedBlockAddedRequest) ProtoMessage() {}

func (x *AfterProposedBlockAddedRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AfterProposedBlockAddedRequest.ProtoReflect.Descriptor instead.
func (*AfterProposedBlockAddedRequest) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{4}
}

func (x *AfterProposedBlockAddedRequest) GetMe() *Peer {
	if x != nil {
		return x.Me
	}
	return nil
}

func (x *AfterProposedBlockAddedRequest) GetProposal() *ProposalPayload {
	if x != nil {
		return x.Proposal
	}
	return nil
}

func (x *AfterProposedBlockAddedRequest) GetReceipts() []*Receipt {
	if x != nil {
		return x.Receipts
	}
	return nil
}

type AfterProposedBlockAddedResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *AfterProposedBlockAddedResponse) Reset() {
	*x = AfterProposedBlockAddedResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AfterProposedBlockAddedResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AfterProposedBlockAddedResponse) ProtoMessage() {}

func (x *AfterProposedBlockAddedResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AfterProposedBlockAddedResponse.ProtoReflect.Descriptor instead.
func (*AfterProposedBlockAddedResponse) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{5}
}

type BeforeVotedRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Me   *Peer        `protobuf:"bytes,1,opt,name=me,proto3" json:"me,omitempty"`
	Vote *VotePayload `protobuf:"bytes,2,opt,name=vote,proto3" json:"vote,omitempty"`
}

func (x *BeforeVotedRequest) Reset() {
	*x = BeforeVotedRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BeforeVotedRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BeforeVotedRequest) ProtoMessage() {}

func (x *BeforeVotedRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BeforeVotedRequest.ProtoReflect.Descriptor instead.
func (*BeforeVotedRequest) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{6}
}

func (x *BeforeVotedRequest) GetMe() *Peer {
	if x != nil {
		return x.Me
	}
	return nil
}

func (x *BeforeVotedRequest) GetVote() *VotePayload {
	if x != nil {
		return x.Vote
	}
	return nil
}

type BeforeVotedResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Vote *VotePayload `protobuf:"bytes,1,opt,name=vote,proto3" json:"vote,omitempty"`
}

func (x *BeforeVotedResponse) Reset() {
	*x = BeforeVotedResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BeforeVotedResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BeforeVotedResponse) ProtoMessage() {}

func (x *BeforeVotedResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BeforeVotedResponse.ProtoReflect.Descriptor instead.
func (*BeforeVotedResponse) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{7}
}

func (x *BeforeVotedResponse) GetVote() *VotePayload {
	if x != nil {
		return x.Vote
	}
	return nil
}

type AfterVotedRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Me   *Peer        `protobuf:"bytes,1,opt,name=me,proto3" json:"me,omitempty"`
	Vote *VotePayload `protobuf:"bytes,2,opt,name=vote,proto3" json:"vote,omitempty"`
}

func (x *AfterVotedRequest) Reset() {
	*x = AfterVotedRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AfterVotedRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AfterVotedRequest) ProtoMessage() {}

func (x *AfterVotedRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AfterVotedRequest.ProtoReflect.Descriptor instead.
func (*AfterVotedRequest) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{8}
}

func (x *AfterVotedRequest) GetMe() *Peer {
	if x != nil {
		return x.Me
	}
	return nil
}

func (x *AfterVotedRequest) GetVote() *VotePayload {
	if x != nil {
		return x.Vote
	}
	return nil
}

type AfterVotedResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *AfterVotedResponse) Reset() {
	*x = AfterVotedResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AfterVotedResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AfterVotedResponse) ProtoMessage() {}

func (x *AfterVotedResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AfterVotedResponse.ProtoReflect.Descriptor instead.
func (*AfterVotedResponse) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{9}
}

type OnProposalRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Me       *Peer            `protobuf:"bytes,1,opt,name=me,proto3" json:"me,omitempty"`
	Proposal *ProposalPayload `protobuf:"bytes,2,opt,name=proposal,proto3" json:"proposal,omitempty"`
}

func (x *OnProposalRequest) Reset() {
	*x = OnProposalRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OnProposalRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OnProposalRequest) ProtoMessage() {}

func (x *OnProposalRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OnProposalRequest.ProtoReflect.Descriptor instead.
func (*OnProposalRequest) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{10}
}

func (x *OnProposalRequest) GetMe() *Peer {
	if x != nil {
		return x.Me
	}
	return nil
}

func (x *OnProposalRequest) GetProposal() *ProposalPayload {
	if x != nil {
		return x.Proposal
	}
	return nil
}

type OnProposalResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *OnProposalResponse) Reset() {
	*x = OnProposalResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OnProposalResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OnProposalResponse) ProtoMessage() {}

func (x *OnProposalResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OnProposalResponse.ProtoReflect.Descriptor instead.
func (*OnProposalResponse) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{11}
}

type OnVoteReceivedRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Me   *Peer        `protobuf:"bytes,1,opt,name=me,proto3" json:"me,omitempty"`
	Vote *VotePayload `protobuf:"bytes,2,opt,name=vote,proto3" json:"vote,omitempty"`
}

func (x *OnVoteReceivedRequest) Reset() {
	*x = OnVoteReceivedRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OnVoteReceivedRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OnVoteReceivedRequest) ProtoMessage() {}

func (x *OnVoteReceivedRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OnVoteReceivedRequest.ProtoReflect.Descriptor instead.
func (*OnVoteReceivedRequest) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{12}
}

func (x *OnVoteReceivedRequest) GetMe() *Peer {
	if x != nil {
		return x.Me
	}
	return nil
}

func (x *OnVoteReceivedRequest) GetVote() *VotePayload {
	if x != nil {
		return x.Vote
	}
	return nil
}

type OnVoteReceivedResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *OnVoteReceivedResponse) Reset() {
	*x = OnVoteReceivedResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OnVoteReceivedResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OnVoteReceivedResponse) ProtoMessage() {}

func (x *OnVoteReceivedResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OnVoteReceivedResponse.ProtoReflect.Descriptor instead.
func (*OnVoteReceivedResponse) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{13}
}

type OnQCFinishedRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Me *Peer               `protobuf:"bytes,1,opt,name=me,proto3" json:"me,omitempty"`
	Qc *QuorumCertificateS `protobuf:"bytes,2,opt,name=qc,proto3" json:"qc,omitempty"`
}

func (x *OnQCFinishedRequest) Reset() {
	*x = OnQCFinishedRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OnQCFinishedRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OnQCFinishedRequest) ProtoMessage() {}

func (x *OnQCFinishedRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OnQCFinishedRequest.ProtoReflect.Descriptor instead.
func (*OnQCFinishedRequest) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{14}
}

func (x *OnQCFinishedRequest) GetMe() *Peer {
	if x != nil {
		return x.Me
	}
	return nil
}

func (x *OnQCFinishedRequest) GetQc() *QuorumCertificateS {
	if x != nil {
		return x.Qc
	}
	return nil
}

type OnQCFinishedResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Qc *QuorumCertificateS `protobuf:"bytes,2,opt,name=qc,proto3" json:"qc,omitempty"`
}

func (x *OnQCFinishedResponse) Reset() {
	*x = OnQCFinishedResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OnQCFinishedResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OnQCFinishedResponse) ProtoMessage() {}

func (x *OnQCFinishedResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OnQCFinishedResponse.ProtoReflect.Descriptor instead.
func (*OnQCFinishedResponse) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{15}
}

func (x *OnQCFinishedResponse) GetQc() *QuorumCertificateS {
	if x != nil {
		return x.Qc
	}
	return nil
}

type OnNextViewRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Me      *Peer `protobuf:"bytes,1,opt,name=me,proto3" json:"me,omitempty"`
	NewView int32 `protobuf:"varint,2,opt,name=newView,proto3" json:"newView,omitempty"`
}

func (x *OnNextViewRequest) Reset() {
	*x = OnNextViewRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OnNextViewRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OnNextViewRequest) ProtoMessage() {}

func (x *OnNextViewRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OnNextViewRequest.ProtoReflect.Descriptor instead.
func (*OnNextViewRequest) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{16}
}

func (x *OnNextViewRequest) GetMe() *Peer {
	if x != nil {
		return x.Me
	}
	return nil
}

func (x *OnNextViewRequest) GetNewView() int32 {
	if x != nil {
		return x.NewView
	}
	return 0
}

type OnNextViewResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *OnNextViewResponse) Reset() {
	*x = OnNextViewResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OnNextViewResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OnNextViewResponse) ProtoMessage() {}

func (x *OnNextViewResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OnNextViewResponse.ProtoReflect.Descriptor instead.
func (*OnNextViewResponse) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{17}
}

type OnNextEpochRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Me       *Peer `protobuf:"bytes,1,opt,name=me,proto3" json:"me,omitempty"`
	NewEpoch int32 `protobuf:"varint,2,opt,name=newEpoch,proto3" json:"newEpoch,omitempty"`
}

func (x *OnNextEpochRequest) Reset() {
	*x = OnNextEpochRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OnNextEpochRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OnNextEpochRequest) ProtoMessage() {}

func (x *OnNextEpochRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OnNextEpochRequest.ProtoReflect.Descriptor instead.
func (*OnNextEpochRequest) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{18}
}

func (x *OnNextEpochRequest) GetMe() *Peer {
	if x != nil {
		return x.Me
	}
	return nil
}

func (x *OnNextEpochRequest) GetNewEpoch() int32 {
	if x != nil {
		return x.NewEpoch
	}
	return 0
}

type OnNextEpochResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *OnNextEpochResponse) Reset() {
	*x = OnNextEpochResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OnNextEpochResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OnNextEpochResponse) ProtoMessage() {}

func (x *OnNextEpochResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OnNextEpochResponse.ProtoReflect.Descriptor instead.
func (*OnNextEpochResponse) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{19}
}

type OnNewBlockCreatedRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Me       *Peer      `protobuf:"bytes,1,opt,name=me,proto3" json:"me,omitempty"`
	Block    *BlockS    `protobuf:"bytes,2,opt,name=block,proto3" json:"block,omitempty"`
	Receipts []*Receipt `protobuf:"bytes,3,rep,name=receipts,proto3" json:"receipts,omitempty"`
}

func (x *OnNewBlockCreatedRequest) Reset() {
	*x = OnNewBlockCreatedRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OnNewBlockCreatedRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OnNewBlockCreatedRequest) ProtoMessage() {}

func (x *OnNewBlockCreatedRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OnNewBlockCreatedRequest.ProtoReflect.Descriptor instead.
func (*OnNewBlockCreatedRequest) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{20}
}

func (x *OnNewBlockCreatedRequest) GetMe() *Peer {
	if x != nil {
		return x.Me
	}
	return nil
}

func (x *OnNewBlockCreatedRequest) GetBlock() *BlockS {
	if x != nil {
		return x.Block
	}
	return nil
}

func (x *OnNewBlockCreatedRequest) GetReceipts() []*Receipt {
	if x != nil {
		return x.Receipts
	}
	return nil
}

type OnNewBlockCreatedResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Block *BlockS `protobuf:"bytes,1,opt,name=block,proto3" json:"block,omitempty"`
}

func (x *OnNewBlockCreatedResponse) Reset() {
	*x = OnNewBlockCreatedResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OnNewBlockCreatedResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OnNewBlockCreatedResponse) ProtoMessage() {}

func (x *OnNewBlockCreatedResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OnNewBlockCreatedResponse.ProtoReflect.Descriptor instead.
func (*OnNewBlockCreatedResponse) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{21}
}

func (x *OnNewBlockCreatedResponse) GetBlock() *BlockS {
	if x != nil {
		return x.Block
	}
	return nil
}

type GetBlockByHashRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Hash []byte `protobuf:"bytes,1,opt,name=hash,proto3" json:"hash,omitempty"`
}

func (x *GetBlockByHashRequest) Reset() {
	*x = GetBlockByHashRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBlockByHashRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBlockByHashRequest) ProtoMessage() {}

func (x *GetBlockByHashRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBlockByHashRequest.ProtoReflect.Descriptor instead.
func (*GetBlockByHashRequest) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{22}
}

func (x *GetBlockByHashRequest) GetHash() []byte {
	if x != nil {
		return x.Hash
	}
	return nil
}

type GetBlockByHashResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Block *BlockS `protobuf:"bytes,1,opt,name=block,proto3" json:"block,omitempty"`
}

func (x *GetBlockByHashResponse) Reset() {
	*x = GetBlockByHashResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBlockByHashResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBlockByHashResponse) ProtoMessage() {}

func (x *GetBlockByHashResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBlockByHashResponse.ProtoReflect.Descriptor instead.
func (*GetBlockByHashResponse) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{23}
}

func (x *GetBlockByHashResponse) GetBlock() *BlockS {
	if x != nil {
		return x.Block
	}
	return nil
}

type GetBlockByHeightRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Height int32 `protobuf:"varint,1,opt,name=height,proto3" json:"height,omitempty"`
}

func (x *GetBlockByHeightRequest) Reset() {
	*x = GetBlockByHeightRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBlockByHeightRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBlockByHeightRequest) ProtoMessage() {}

func (x *GetBlockByHeightRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBlockByHeightRequest.ProtoReflect.Descriptor instead.
func (*GetBlockByHeightRequest) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{24}
}

func (x *GetBlockByHeightRequest) GetHeight() int32 {
	if x != nil {
		return x.Height
	}
	return 0
}

type GetBlockByHeightResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Blocks []*BlockS `protobuf:"bytes,1,rep,name=blocks,proto3" json:"blocks,omitempty"`
}

func (x *GetBlockByHeightResponse) Reset() {
	*x = GetBlockByHeightResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBlockByHeightResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBlockByHeightResponse) ProtoMessage() {}

func (x *GetBlockByHeightResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBlockByHeightResponse.ProtoReflect.Descriptor instead.
func (*GetBlockByHeightResponse) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{25}
}

func (x *GetBlockByHeightResponse) GetBlocks() []*BlockS {
	if x != nil {
		return x.Blocks
	}
	return nil
}

type GetForkRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Height   int32  `protobuf:"varint,1,opt,name=height,proto3" json:"height,omitempty"`
	HeadHash []byte `protobuf:"bytes,2,opt,name=headHash,proto3" json:"headHash,omitempty"`
}

func (x *GetForkRequest) Reset() {
	*x = GetForkRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetForkRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetForkRequest) ProtoMessage() {}

func (x *GetForkRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetForkRequest.ProtoReflect.Descriptor instead.
func (*GetForkRequest) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{26}
}

func (x *GetForkRequest) GetHeight() int32 {
	if x != nil {
		return x.Height
	}
	return 0
}

func (x *GetForkRequest) GetHeadHash() []byte {
	if x != nil {
		return x.HeadHash
	}
	return nil
}

type GetForkResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Blocks []*BlockS `protobuf:"bytes,1,rep,name=blocks,proto3" json:"blocks,omitempty"`
}

func (x *GetForkResponse) Reset() {
	*x = GetForkResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetForkResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetForkResponse) ProtoMessage() {}

func (x *GetForkResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetForkResponse.ProtoReflect.Descriptor instead.
func (*GetForkResponse) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{27}
}

func (x *GetForkResponse) GetBlocks() []*BlockS {
	if x != nil {
		return x.Blocks
	}
	return nil
}

type ContainsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Hash []byte `protobuf:"bytes,1,opt,name=hash,proto3" json:"hash,omitempty"`
}

func (x *ContainsRequest) Reset() {
	*x = ContainsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContainsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContainsRequest) ProtoMessage() {}

func (x *ContainsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContainsRequest.ProtoReflect.Descriptor instead.
func (*ContainsRequest) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{28}
}

func (x *ContainsRequest) GetHash() []byte {
	if x != nil {
		return x.Hash
	}
	return nil
}

type ContainsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Res bool `protobuf:"varint,1,opt,name=res,proto3" json:"res,omitempty"`
}

func (x *ContainsResponse) Reset() {
	*x = ContainsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContainsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContainsResponse) ProtoMessage() {}

func (x *ContainsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContainsResponse.ProtoReflect.Descriptor instead.
func (*ContainsResponse) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{29}
}

func (x *ContainsResponse) GetRes() bool {
	if x != nil {
		return x.Res
	}
	return false
}

type GetThreeChainRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Hash []byte `protobuf:"bytes,1,opt,name=hash,proto3" json:"hash,omitempty"`
}

func (x *GetThreeChainRequest) Reset() {
	*x = GetThreeChainRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetThreeChainRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetThreeChainRequest) ProtoMessage() {}

func (x *GetThreeChainRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetThreeChainRequest.ProtoReflect.Descriptor instead.
func (*GetThreeChainRequest) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{30}
}

func (x *GetThreeChainRequest) GetHash() []byte {
	if x != nil {
		return x.Hash
	}
	return nil
}

type GetThreeChainResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Zero *BlockS `protobuf:"bytes,1,opt,name=zero,proto3" json:"zero,omitempty"`
	One  *BlockS `protobuf:"bytes,2,opt,name=one,proto3" json:"one,omitempty"`
	Two  *BlockS `protobuf:"bytes,3,opt,name=two,proto3" json:"two,omitempty"`
}

func (x *GetThreeChainResponse) Reset() {
	*x = GetThreeChainResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetThreeChainResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetThreeChainResponse) ProtoMessage() {}

func (x *GetThreeChainResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetThreeChainResponse.ProtoReflect.Descriptor instead.
func (*GetThreeChainResponse) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{31}
}

func (x *GetThreeChainResponse) GetZero() *BlockS {
	if x != nil {
		return x.Zero
	}
	return nil
}

func (x *GetThreeChainResponse) GetOne() *BlockS {
	if x != nil {
		return x.One
	}
	return nil
}

func (x *GetThreeChainResponse) GetTwo() *BlockS {
	if x != nil {
		return x.Two
	}
	return nil
}

type GetHeadRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetHeadRequest) Reset() {
	*x = GetHeadRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetHeadRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetHeadRequest) ProtoMessage() {}

func (x *GetHeadRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetHeadRequest.ProtoReflect.Descriptor instead.
func (*GetHeadRequest) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{32}
}

type GetHeadResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Block *BlockS `protobuf:"bytes,1,opt,name=block,proto3" json:"block,omitempty"`
}

func (x *GetHeadResponse) Reset() {
	*x = GetHeadResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetHeadResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetHeadResponse) ProtoMessage() {}

func (x *GetHeadResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetHeadResponse.ProtoReflect.Descriptor instead.
func (*GetHeadResponse) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{33}
}

func (x *GetHeadResponse) GetBlock() *BlockS {
	if x != nil {
		return x.Block
	}
	return nil
}

type GetTopHeightRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetTopHeightRequest) Reset() {
	*x = GetTopHeightRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTopHeightRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTopHeightRequest) ProtoMessage() {}

func (x *GetTopHeightRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTopHeightRequest.ProtoReflect.Descriptor instead.
func (*GetTopHeightRequest) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{34}
}

type GetTopHeightResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Height int32 `protobuf:"varint,1,opt,name=height,proto3" json:"height,omitempty"`
}

func (x *GetTopHeightResponse) Reset() {
	*x = GetTopHeightResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTopHeightResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTopHeightResponse) ProtoMessage() {}

func (x *GetTopHeightResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTopHeightResponse.ProtoReflect.Descriptor instead.
func (*GetTopHeightResponse) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{35}
}

func (x *GetTopHeightResponse) GetHeight() int32 {
	if x != nil {
		return x.Height
	}
	return 0
}

type GetTopHeightBlockRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetTopHeightBlockRequest) Reset() {
	*x = GetTopHeightBlockRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTopHeightBlockRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTopHeightBlockRequest) ProtoMessage() {}

func (x *GetTopHeightBlockRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTopHeightBlockRequest.ProtoReflect.Descriptor instead.
func (*GetTopHeightBlockRequest) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{36}
}

type GetTopHeightBlockResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Block *BlockS `protobuf:"bytes,1,opt,name=block,proto3" json:"block,omitempty"`
}

func (x *GetTopHeightBlockResponse) Reset() {
	*x = GetTopHeightBlockResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTopHeightBlockResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTopHeightBlockResponse) ProtoMessage() {}

func (x *GetTopHeightBlockResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTopHeightBlockResponse.ProtoReflect.Descriptor instead.
func (*GetTopHeightBlockResponse) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{37}
}

func (x *GetTopHeightBlockResponse) GetBlock() *BlockS {
	if x != nil {
		return x.Block
	}
	return nil
}

type GetGenesisBlockRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetGenesisBlockRequest) Reset() {
	*x = GetGenesisBlockRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetGenesisBlockRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetGenesisBlockRequest) ProtoMessage() {}

func (x *GetGenesisBlockRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetGenesisBlockRequest.ProtoReflect.Descriptor instead.
func (*GetGenesisBlockRequest) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{38}
}

type GetGenesisBlockResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Block *BlockS `protobuf:"bytes,1,opt,name=block,proto3" json:"block,omitempty"`
}

func (x *GetGenesisBlockResponse) Reset() {
	*x = GetGenesisBlockResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetGenesisBlockResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetGenesisBlockResponse) ProtoMessage() {}

func (x *GetGenesisBlockResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetGenesisBlockResponse.ProtoReflect.Descriptor instead.
func (*GetGenesisBlockResponse) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{39}
}

func (x *GetGenesisBlockResponse) GetBlock() *BlockS {
	if x != nil {
		return x.Block
	}
	return nil
}

type IsSiblingRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SiblingHash  []byte `protobuf:"bytes,1,opt,name=siblingHash,proto3" json:"siblingHash,omitempty"`
	AncestorHash []byte `protobuf:"bytes,2,opt,name=ancestorHash,proto3" json:"ancestorHash,omitempty"`
}

func (x *IsSiblingRequest) Reset() {
	*x = IsSiblingRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IsSiblingRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsSiblingRequest) ProtoMessage() {}

func (x *IsSiblingRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsSiblingRequest.ProtoReflect.Descriptor instead.
func (*IsSiblingRequest) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{40}
}

func (x *IsSiblingRequest) GetSiblingHash() []byte {
	if x != nil {
		return x.SiblingHash
	}
	return nil
}

func (x *IsSiblingRequest) GetAncestorHash() []byte {
	if x != nil {
		return x.AncestorHash
	}
	return nil
}

type IsSiblingResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Res bool `protobuf:"varint,1,opt,name=res,proto3" json:"res,omitempty"`
}

func (x *IsSiblingResponse) Reset() {
	*x = IsSiblingResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IsSiblingResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsSiblingResponse) ProtoMessage() {}

func (x *IsSiblingResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsSiblingResponse.ProtoReflect.Descriptor instead.
func (*IsSiblingResponse) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{41}
}

func (x *IsSiblingResponse) GetRes() bool {
	if x != nil {
		return x.Res
	}
	return false
}

type GetAccountRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Address []byte `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	Hash    []byte `protobuf:"bytes,2,opt,name=hash,proto3" json:"hash,omitempty"`
}

func (x *GetAccountRequest) Reset() {
	*x = GetAccountRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAccountRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAccountRequest) ProtoMessage() {}

func (x *GetAccountRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAccountRequest.ProtoReflect.Descriptor instead.
func (*GetAccountRequest) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{42}
}

func (x *GetAccountRequest) GetAddress() []byte {
	if x != nil {
		return x.Address
	}
	return nil
}

func (x *GetAccountRequest) GetHash() []byte {
	if x != nil {
		return x.Hash
	}
	return nil
}

type GetAccountResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Account *Account `protobuf:"bytes,1,opt,name=account,proto3" json:"account,omitempty"`
}

func (x *GetAccountResponse) Reset() {
	*x = GetAccountResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAccountResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAccountResponse) ProtoMessage() {}

func (x *GetAccountResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAccountResponse.ProtoReflect.Descriptor instead.
func (*GetAccountResponse) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{43}
}

func (x *GetAccountResponse) GetAccount() *Account {
	if x != nil {
		return x.Account
	}
	return nil
}

type GetTransactionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Hash []byte `protobuf:"bytes,1,opt,name=hash,proto3" json:"hash,omitempty"`
}

func (x *GetTransactionRequest) Reset() {
	*x = GetTransactionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTransactionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTransactionRequest) ProtoMessage() {}

func (x *GetTransactionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTransactionRequest.ProtoReflect.Descriptor instead.
func (*GetTransactionRequest) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{44}
}

func (x *GetTransactionRequest) GetHash() []byte {
	if x != nil {
		return x.Hash
	}
	return nil
}

type GetTransactionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tx *TransactionS `protobuf:"bytes,1,opt,name=tx,proto3" json:"tx,omitempty"`
}

func (x *GetTransactionResponse) Reset() {
	*x = GetTransactionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTransactionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTransactionResponse) ProtoMessage() {}

func (x *GetTransactionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTransactionResponse.ProtoReflect.Descriptor instead.
func (*GetTransactionResponse) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{45}
}

func (x *GetTransactionResponse) GetTx() *TransactionS {
	if x != nil {
		return x.Tx
	}
	return nil
}

type GetProposerForViewRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	View int32 `protobuf:"varint,1,opt,name=view,proto3" json:"view,omitempty"`
}

func (x *GetProposerForViewRequest) Reset() {
	*x = GetProposerForViewRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetProposerForViewRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetProposerForViewRequest) ProtoMessage() {}

func (x *GetProposerForViewRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetProposerForViewRequest.ProtoReflect.Descriptor instead.
func (*GetProposerForViewRequest) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{46}
}

func (x *GetProposerForViewRequest) GetView() int32 {
	if x != nil {
		return x.View
	}
	return 0
}

type GetProposerForViewResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Peer *Peer `protobuf:"bytes,1,opt,name=peer,proto3" json:"peer,omitempty"`
}

func (x *GetProposerForViewResponse) Reset() {
	*x = GetProposerForViewResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetProposerForViewResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetProposerForViewResponse) ProtoMessage() {}

func (x *GetProposerForViewResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetProposerForViewResponse.ProtoReflect.Descriptor instead.
func (*GetProposerForViewResponse) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{47}
}

func (x *GetProposerForViewResponse) GetPeer() *Peer {
	if x != nil {
		return x.Peer
	}
	return nil
}

type GetCommitteeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetCommitteeRequest) Reset() {
	*x = GetCommitteeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCommitteeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCommitteeRequest) ProtoMessage() {}

func (x *GetCommitteeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCommitteeRequest.ProtoReflect.Descriptor instead.
func (*GetCommitteeRequest) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{48}
}

type GetCommitteeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Peer []*Peer `protobuf:"bytes,1,rep,name=peer,proto3" json:"peer,omitempty"`
}

func (x *GetCommitteeResponse) Reset() {
	*x = GetCommitteeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCommitteeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCommitteeResponse) ProtoMessage() {}

func (x *GetCommitteeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCommitteeResponse.ProtoReflect.Descriptor instead.
func (*GetCommitteeResponse) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{49}
}

func (x *GetCommitteeResponse) GetPeer() []*Peer {
	if x != nil {
		return x.Peer
	}
	return nil
}

type GetCurrentViewRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetCurrentViewRequest) Reset() {
	*x = GetCurrentViewRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCurrentViewRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCurrentViewRequest) ProtoMessage() {}

func (x *GetCurrentViewRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCurrentViewRequest.ProtoReflect.Descriptor instead.
func (*GetCurrentViewRequest) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{50}
}

type GetCurrentViewResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	View int32 `protobuf:"varint,1,opt,name=view,proto3" json:"view,omitempty"`
}

func (x *GetCurrentViewResponse) Reset() {
	*x = GetCurrentViewResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCurrentViewResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCurrentViewResponse) ProtoMessage() {}

func (x *GetCurrentViewResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCurrentViewResponse.ProtoReflect.Descriptor instead.
func (*GetCurrentViewResponse) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{51}
}

func (x *GetCurrentViewResponse) GetView() int32 {
	if x != nil {
		return x.View
	}
	return 0
}

type GetCurrentEpochRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetCurrentEpochRequest) Reset() {
	*x = GetCurrentEpochRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCurrentEpochRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCurrentEpochRequest) ProtoMessage() {}

func (x *GetCurrentEpochRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCurrentEpochRequest.ProtoReflect.Descriptor instead.
func (*GetCurrentEpochRequest) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{52}
}

type GetCurrentEpochResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Epoch int32 `protobuf:"varint,1,opt,name=epoch,proto3" json:"epoch,omitempty"`
}

func (x *GetCurrentEpochResponse) Reset() {
	*x = GetCurrentEpochResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCurrentEpochResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCurrentEpochResponse) ProtoMessage() {}

func (x *GetCurrentEpochResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCurrentEpochResponse.ProtoReflect.Descriptor instead.
func (*GetCurrentEpochResponse) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{53}
}

func (x *GetCurrentEpochResponse) GetEpoch() int32 {
	if x != nil {
		return x.Epoch
	}
	return 0
}

type GetTopCommittedBlockRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetTopCommittedBlockRequest) Reset() {
	*x = GetTopCommittedBlockRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTopCommittedBlockRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTopCommittedBlockRequest) ProtoMessage() {}

func (x *GetTopCommittedBlockRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTopCommittedBlockRequest.ProtoReflect.Descriptor instead.
func (*GetTopCommittedBlockRequest) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{54}
}

type GetTopCommittedBlockResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Block *BlockS `protobuf:"bytes,1,opt,name=block,proto3" json:"block,omitempty"`
}

func (x *GetTopCommittedBlockResponse) Reset() {
	*x = GetTopCommittedBlockResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTopCommittedBlockResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTopCommittedBlockResponse) ProtoMessage() {}

func (x *GetTopCommittedBlockResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTopCommittedBlockResponse.ProtoReflect.Descriptor instead.
func (*GetTopCommittedBlockResponse) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{55}
}

func (x *GetTopCommittedBlockResponse) GetBlock() *BlockS {
	if x != nil {
		return x.Block
	}
	return nil
}

type ExecuteTransactionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tx *TransactionS `protobuf:"bytes,1,opt,name=tx,proto3" json:"tx,omitempty"`
}

func (x *ExecuteTransactionRequest) Reset() {
	*x = ExecuteTransactionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExecuteTransactionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecuteTransactionRequest) ProtoMessage() {}

func (x *ExecuteTransactionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecuteTransactionRequest.ProtoReflect.Descriptor instead.
func (*ExecuteTransactionRequest) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{56}
}

func (x *ExecuteTransactionRequest) GetTx() *TransactionS {
	if x != nil {
		return x.Tx
	}
	return nil
}

type ExecuteTransactionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ExecuteTransactionResponse) Reset() {
	*x = ExecuteTransactionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExecuteTransactionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecuteTransactionResponse) ProtoMessage() {}

func (x *ExecuteTransactionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecuteTransactionResponse.ProtoReflect.Descriptor instead.
func (*ExecuteTransactionResponse) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{57}
}

var File_api_proto protoreflect.FileDescriptor

var file_api_proto_rawDesc = []byte{
	0x0a, 0x09, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x13, 0x67, 0x61, 0x67,
	0x61, 0x72, 0x69, 0x6e, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x61, 0x70, 0x69,
	0x1a, 0x0d, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x0d, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xb7,
	0x01, 0x0a, 0x14, 0x4f, 0x6e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2d, 0x0a, 0x02, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x61, 0x67, 0x61, 0x72, 0x69, 0x6e, 0x2e, 0x6e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x50, 0x65,
	0x65, 0x72, 0x52, 0x02, 0x6d, 0x65, 0x12, 0x35, 0x0a, 0x05, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x61, 0x67, 0x61, 0x72, 0x69, 0x6e, 0x2e,
	0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e,
	0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x52, 0x05, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x39, 0x0a,
	0x07, 0x6f, 0x72, 0x70, 0x68, 0x61, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f,
	0x2e, 0x67, 0x61, 0x67, 0x61, 0x72, 0x69, 0x6e, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x52,
	0x07, 0x6f, 0x72, 0x70, 0x68, 0x61, 0x6e, 0x73, 0x22, 0x17, 0x0a, 0x15, 0x4f, 0x6e, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x93, 0x01, 0x0a, 0x1f, 0x42, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x50, 0x72, 0x6f, 0x70,
	0x6f, 0x73, 0x65, 0x64, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x41, 0x64, 0x64, 0x65, 0x64, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2d, 0x0a, 0x02, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x61, 0x67, 0x61, 0x72, 0x69, 0x6e, 0x2e, 0x6e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x50, 0x65, 0x65, 0x72,
	0x52, 0x02, 0x6d, 0x65, 0x12, 0x41, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x67, 0x61, 0x67, 0x61, 0x72, 0x69, 0x6e,
	0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x50, 0x72,
	0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x08, 0x70,
	0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x22, 0x65, 0x0a, 0x20, 0x42, 0x65, 0x66, 0x6f, 0x72,
	0x65, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x65, 0x64, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x41, 0x64,
	0x64, 0x65, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x41, 0x0a, 0x08, 0x70,
	0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e,
	0x67, 0x61, 0x67, 0x61, 0x72, 0x69, 0x6e, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x50, 0x61, 0x79,
	0x6c, 0x6f, 0x61, 0x64, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x22, 0xd0,
	0x01, 0x0a, 0x1e, 0x41, 0x66, 0x74, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x65, 0x64,
	0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x41, 0x64, 0x64, 0x65, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x2d, 0x0a, 0x02, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e,
	0x67, 0x61, 0x67, 0x61, 0x72, 0x69, 0x6e, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e,
	0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x50, 0x65, 0x65, 0x72, 0x52, 0x02, 0x6d, 0x65,
	0x12, 0x41, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x25, 0x2e, 0x67, 0x61, 0x67, 0x61, 0x72, 0x69, 0x6e, 0x2e, 0x6e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73,
	0x61, 0x6c, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x70, 0x6f,
	0x73, 0x61, 0x6c, 0x12, 0x3c, 0x0a, 0x08, 0x72, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x73, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x61, 0x67, 0x61, 0x72, 0x69, 0x6e, 0x2e,
	0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e,
	0x52, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x52, 0x08, 0x72, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74,
	0x73, 0x22, 0x21, 0x0a, 0x1f, 0x41, 0x66, 0x74, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73,
	0x65, 0x64, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x41, 0x64, 0x64, 0x65, 0x64, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x7a, 0x0a, 0x12, 0x42, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x56, 0x6f,
	0x74, 0x65, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2d, 0x0a, 0x02, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x61, 0x67, 0x61, 0x72, 0x69, 0x6e,
	0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65,
	0x2e, 0x50, 0x65, 0x65, 0x72, 0x52, 0x02, 0x6d, 0x65, 0x12, 0x35, 0x0a, 0x04, 0x76, 0x6f, 0x74,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x61, 0x67, 0x61, 0x72, 0x69,
	0x6e, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x56,
	0x6f, 0x74, 0x65, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x04, 0x76, 0x6f, 0x74, 0x65,
	0x22, 0x4c, 0x0a, 0x13, 0x42, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x56, 0x6f, 0x74, 0x65, 0x64, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x35, 0x0a, 0x04, 0x76, 0x6f, 0x74, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x61, 0x67, 0x61, 0x72, 0x69, 0x6e, 0x2e,
	0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x56, 0x6f, 0x74,
	0x65, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x04, 0x76, 0x6f, 0x74, 0x65, 0x22, 0x79,
	0x0a, 0x11, 0x41, 0x66, 0x74, 0x65, 0x72, 0x56, 0x6f, 0x74, 0x65, 0x64, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x2d, 0x0a, 0x02, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1d, 0x2e, 0x67, 0x61, 0x67, 0x61, 0x72, 0x69, 0x6e, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x50, 0x65, 0x65, 0x72, 0x52, 0x02,
	0x6d, 0x65, 0x12, 0x35, 0x0a, 0x04, 0x76, 0x6f, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x21, 0x2e, 0x67, 0x61, 0x67, 0x61, 0x72, 0x69, 0x6e, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x56, 0x6f, 0x74, 0x65, 0x50, 0x61, 0x79, 0x6c,
	0x6f, 0x61, 0x64, 0x52, 0x04, 0x76, 0x6f, 0x74, 0x65, 0x22, 0x14, 0x0a, 0x12, 0x41, 0x66, 0x74,
	0x65, 0x72, 0x56, 0x6f, 0x74, 0x65, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x85, 0x01, 0x0a, 0x11, 0x4f, 0x6e, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2d, 0x0a, 0x02, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x61, 0x67, 0x61, 0x72, 0x69, 0x6e, 0x2e, 0x6e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x50, 0x65, 0x65, 0x72,
	0x52, 0x02, 0x6d, 0x65, 0x12, 0x41, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x67, 0x61, 0x67, 0x61, 0x72, 0x69, 0x6e,
	0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x50, 0x72,
	0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x08, 0x70,
	0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x22, 0x14, 0x0a, 0x12, 0x4f, 0x6e, 0x50, 0x72, 0x6f,
	0x70, 0x6f, 0x73, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x7d, 0x0a,
	0x15, 0x4f, 0x6e, 0x56, 0x6f, 0x74, 0x65, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2d, 0x0a, 0x02, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x61, 0x67, 0x61, 0x72, 0x69, 0x6e, 0x2e, 0x6e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x50, 0x65, 0x65,
	0x72, 0x52, 0x02, 0x6d, 0x65, 0x12, 0x35, 0x0a, 0x04, 0x76, 0x6f, 0x74, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x61, 0x67, 0x61, 0x72, 0x69, 0x6e, 0x2e, 0x6e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x56, 0x6f, 0x74, 0x65, 0x50,
	0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x04, 0x76, 0x6f, 0x74, 0x65, 0x22, 0x18, 0x0a, 0x16,
	0x4f, 0x6e, 0x56, 0x6f, 0x74, 0x65, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x81, 0x01, 0x0a, 0x13, 0x4f, 0x6e, 0x51, 0x43, 0x46,
	0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2d,
	0x0a, 0x02, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x61, 0x67,
	0x61, 0x72, 0x69, 0x6e, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x73, 0x74, 0x6f,
	0x72, 0x61, 0x67, 0x65, 0x2e, 0x50, 0x65, 0x65, 0x72, 0x52, 0x02, 0x6d, 0x65, 0x12, 0x3b, 0x0a,
	0x02, 0x71, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x67, 0x61, 0x67, 0x61,
	0x72, 0x69, 0x6e, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x73, 0x74, 0x6f, 0x72,
	0x61, 0x67, 0x65, 0x2e, 0x51, 0x75, 0x6f, 0x72, 0x75, 0x6d, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x65, 0x53, 0x52, 0x02, 0x71, 0x63, 0x22, 0x53, 0x0a, 0x14, 0x4f, 0x6e,
	0x51, 0x43, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x3b, 0x0a, 0x02, 0x71, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b,
	0x2e, 0x67, 0x61, 0x67, 0x61, 0x72, 0x69, 0x6e, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x51, 0x75, 0x6f, 0x72, 0x75, 0x6d, 0x43,
	0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x53, 0x52, 0x02, 0x71, 0x63, 0x22,
	0x5c, 0x0a, 0x11, 0x4f, 0x6e, 0x4e, 0x65, 0x78, 0x74, 0x56, 0x69, 0x65, 0x77, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x2d, 0x0a, 0x02, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1d, 0x2e, 0x67, 0x61, 0x67, 0x61, 0x72, 0x69, 0x6e, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x50, 0x65, 0x65, 0x72, 0x52,
	0x02, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6e, 0x65, 0x77, 0x56, 0x69, 0x65, 0x77, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x6e, 0x65, 0x77, 0x56, 0x69, 0x65, 0x77, 0x22, 0x14, 0x0a,
	0x12, 0x4f, 0x6e, 0x4e, 0x65, 0x78, 0x74, 0x56, 0x69, 0x65, 0x77, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x5f, 0x0a, 0x12, 0x4f, 0x6e, 0x4e, 0x65, 0x78, 0x74, 0x45, 0x70, 0x6f,
	0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2d, 0x0a, 0x02, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x61, 0x67, 0x61, 0x72, 0x69, 0x6e, 0x2e,
	0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e,
	0x50, 0x65, 0x65, 0x72, 0x52, 0x02, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6e, 0x65, 0x77, 0x45,
	0x70, 0x6f, 0x63, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x6e, 0x65, 0x77, 0x45,
	0x70, 0x6f, 0x63, 0x68, 0x22, 0x15, 0x0a, 0x13, 0x4f, 0x6e, 0x4e, 0x65, 0x78, 0x74, 0x45, 0x70,
	0x6f, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xbe, 0x01, 0x0a, 0x18,
	0x4f, 0x6e, 0x4e, 0x65, 0x77, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2d, 0x0a, 0x02, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x61, 0x67, 0x61, 0x72, 0x69, 0x6e, 0x2e, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x50,
	0x65, 0x65, 0x72, 0x52, 0x02, 0x6d, 0x65, 0x12, 0x35, 0x0a, 0x05, 0x62, 0x6c, 0x6f, 0x63, 0x6b,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x61, 0x67, 0x61, 0x72, 0x69, 0x6e,
	0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65,
	0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x52, 0x05, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x3c,
	0x0a, 0x08, 0x72, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x20, 0x2e, 0x67, 0x61, 0x67, 0x61, 0x72, 0x69, 0x6e, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x52, 0x65, 0x63, 0x65, 0x69,
	0x70, 0x74, 0x52, 0x08, 0x72, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x73, 0x22, 0x52, 0x0a, 0x19,
	0x4f, 0x6e, 0x4e, 0x65, 0x77, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x35, 0x0a, 0x05, 0x62, 0x6c, 0x6f,
	0x63, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x61, 0x67, 0x61, 0x72,
	0x69, 0x6e, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61,
	0x67, 0x65, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x52, 0x05, 0x62, 0x6c, 0x6f, 0x63, 0x6b,
	0x22, 0x2b, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x42, 0x79, 0x48, 0x61,
	0x73, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x61, 0x73,
	0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x68, 0x61, 0x73, 0x68, 0x22, 0x4f, 0x0a,
	0x16, 0x47, 0x65, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x42, 0x79, 0x48, 0x61, 0x73, 0x68, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x35, 0x0a, 0x05, 0x62, 0x6c, 0x6f, 0x63, 0x6b,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x61, 0x67, 0x61, 0x72, 0x69, 0x6e,
	0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65,
	0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x52, 0x05, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x22, 0x31,
	0x0a, 0x17, 0x47, 0x65, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x42, 0x79, 0x48, 0x65, 0x69, 0x67,
	0x68, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x65, 0x69,
	0x67, 0x68, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68,
	0x74, 0x22, 0x53, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x42, 0x79, 0x48,
	0x65, 0x69, 0x67, 0x68, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x37, 0x0a,
	0x06, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e,
	0x67, 0x61, 0x67, 0x61, 0x72, 0x69, 0x6e, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e,
	0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x52, 0x06,
	0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x22, 0x44, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x46, 0x6f, 0x72,
	0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x65, 0x69, 0x67,
	0x68, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74,
	0x12, 0x1a, 0x0a, 0x08, 0x68, 0x65, 0x61, 0x64, 0x48, 0x61, 0x73, 0x68, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x08, 0x68, 0x65, 0x61, 0x64, 0x48, 0x61, 0x73, 0x68, 0x22, 0x4a, 0x0a, 0x0f,
	0x47, 0x65, 0x74, 0x46, 0x6f, 0x72, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x37, 0x0a, 0x06, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1f, 0x2e, 0x67, 0x61, 0x67, 0x61, 0x72, 0x69, 0x6e, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x53,
	0x52, 0x06, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x22, 0x25, 0x0a, 0x0f, 0x43, 0x6f, 0x6e, 0x74,
	0x61, 0x69, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x68,
	0x61, 0x73, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x68, 0x61, 0x73, 0x68, 0x22,
	0x24, 0x0a, 0x10, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x03, 0x72, 0x65, 0x73, 0x22, 0x2a, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x54, 0x68, 0x72, 0x65,
	0x65, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a,
	0x04, 0x68, 0x61, 0x73, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x68, 0x61, 0x73,
	0x68, 0x22, 0xb2, 0x01, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x54, 0x68, 0x72, 0x65, 0x65, 0x43, 0x68,
	0x61, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x04, 0x7a,
	0x65, 0x72, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x61, 0x67, 0x61,
	0x72, 0x69, 0x6e, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x73, 0x74, 0x6f, 0x72,
	0x61, 0x67, 0x65, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x52, 0x04, 0x7a, 0x65, 0x72, 0x6f,
	0x12, 0x31, 0x0a, 0x03, 0x6f, 0x6e, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e,
	0x67, 0x61, 0x67, 0x61, 0x72, 0x69, 0x6e, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e,
	0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x52, 0x03,
	0x6f, 0x6e, 0x65, 0x12, 0x31, 0x0a, 0x03, 0x74, 0x77, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1f, 0x2e, 0x67, 0x61, 0x67, 0x61, 0x72, 0x69, 0x6e, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x53, 0x52, 0x03, 0x74, 0x77, 0x6f, 0x22, 0x10, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x48, 0x65, 0x61,
	0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x48, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x48,
	0x65, 0x61, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x35, 0x0a, 0x05, 0x62,
	0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x61, 0x67,
	0x61, 0x72, 0x69, 0x6e, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x73, 0x74, 0x6f,
	0x72, 0x61, 0x67, 0x65, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x52, 0x05, 0x62, 0x6c, 0x6f,
	0x63, 0x6b, 0x22, 0x15, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x54, 0x6f, 0x70, 0x48, 0x65, 0x69, 0x67,
	0x68, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x2e, 0x0a, 0x14, 0x47, 0x65, 0x74,
	0x54, 0x6f, 0x70, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x22, 0x1a, 0x0a, 0x18, 0x47, 0x65, 0x74,
	0x54, 0x6f, 0x70, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x52, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x54, 0x6f, 0x70, 0x48,
	0x65, 0x69, 0x67, 0x68, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x35, 0x0a, 0x05, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x61, 0x67, 0x61, 0x72, 0x69, 0x6e, 0x2e, 0x6e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x53, 0x52, 0x05, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x22, 0x18, 0x0a, 0x16, 0x47, 0x65, 0x74,
	0x47, 0x65, 0x6e, 0x65, 0x73, 0x69, 0x73, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x22, 0x50, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x47, 0x65, 0x6e, 0x65, 0x73, 0x69,
	0x73, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x35,
	0x0a, 0x05, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e,
	0x67, 0x61, 0x67, 0x61, 0x72, 0x69, 0x6e, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e,
	0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x52, 0x05,
	0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x22, 0x58, 0x0a, 0x10, 0x49, 0x73, 0x53, 0x69, 0x62, 0x6c, 0x69,
	0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x69, 0x62,
	0x6c, 0x69, 0x6e, 0x67, 0x48, 0x61, 0x73, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b,
	0x73, 0x69, 0x62, 0x6c, 0x69, 0x6e, 0x67, 0x48, 0x61, 0x73, 0x68, 0x12, 0x22, 0x0a, 0x0c, 0x61,
	0x6e, 0x63, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x48, 0x61, 0x73, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x0c, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x48, 0x61, 0x73, 0x68, 0x22,
	0x25, 0x0a, 0x11, 0x49, 0x73, 0x53, 0x69, 0x62, 0x6c, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x03, 0x72, 0x65, 0x73, 0x22, 0x41, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x61, 0x73, 0x68, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x04, 0x68, 0x61, 0x73, 0x68, 0x22, 0x50, 0x0a, 0x12, 0x47, 0x65, 0x74,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x3a, 0x0a, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x20, 0x2e, 0x67, 0x61, 0x67, 0x61, 0x72, 0x69, 0x6e, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x52, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x2b, 0x0a, 0x15, 0x47,
	0x65, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x61, 0x73, 0x68, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x04, 0x68, 0x61, 0x73, 0x68, 0x22, 0x4f, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x35, 0x0a, 0x02, 0x74, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25,
	0x2e, 0x67, 0x61, 0x67, 0x61, 0x72, 0x69, 0x6e, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x53, 0x52, 0x02, 0x74, 0x78, 0x22, 0x2f, 0x0a, 0x19, 0x47, 0x65, 0x74,
	0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x65, 0x72, 0x46, 0x6f, 0x72, 0x56, 0x69, 0x65, 0x77, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x76, 0x69, 0x65, 0x77, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x76, 0x69, 0x65, 0x77, 0x22, 0x4f, 0x0a, 0x1a, 0x47, 0x65,
	0x74, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x65, 0x72, 0x46, 0x6f, 0x72, 0x56, 0x69, 0x65, 0x77,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x31, 0x0a, 0x04, 0x70, 0x65, 0x65, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x61, 0x67, 0x61, 0x72, 0x69, 0x6e,
	0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65,
	0x2e, 0x50, 0x65, 0x65, 0x72, 0x52, 0x04, 0x70, 0x65, 0x65, 0x72, 0x22, 0x15, 0x0a, 0x13, 0x47,
	0x65, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x22, 0x49, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x74,
	0x65, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x31, 0x0a, 0x04, 0x70, 0x65,
	0x65, 0x72, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x61, 0x67, 0x61, 0x72,
	0x69, 0x6e, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61,
	0x67, 0x65, 0x2e, 0x50, 0x65, 0x65, 0x72, 0x52, 0x04, 0x70, 0x65, 0x65, 0x72, 0x22, 0x17, 0x0a,
	0x15, 0x47, 0x65, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x56, 0x69, 0x65, 0x77, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x2c, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x43, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x74, 0x56, 0x69, 0x65, 0x77, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x76, 0x69, 0x65, 0x77, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04,
	0x76, 0x69, 0x65, 0x77, 0x22, 0x18, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x74, 0x45, 0x70, 0x6f, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x2f,
	0x0a, 0x17, 0x47, 0x65, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x45, 0x70, 0x6f, 0x63,
	0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x70, 0x6f,
	0x63, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x22,
	0x1d, 0x0a, 0x1b, 0x47, 0x65, 0x74, 0x54, 0x6f, 0x70, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x74,
	0x65, 0x64, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x55,
	0x0a, 0x1c, 0x47, 0x65, 0x74, 0x54, 0x6f, 0x70, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x74, 0x65,
	0x64, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x35,
	0x0a, 0x05, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e,
	0x67, 0x61, 0x67, 0x61, 0x72, 0x69, 0x6e, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e,
	0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x52, 0x05,
	0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x22, 0x52, 0x0a, 0x19, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x35, 0x0a, 0x02, 0x74, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25,
	0x2e, 0x67, 0x61, 0x67, 0x61, 0x72, 0x69, 0x6e, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x53, 0x52, 0x02, 0x74, 0x78, 0x22, 0x1c, 0x0a, 0x1a, 0x45, 0x78, 0x65,
	0x63, 0x75, 0x74, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32, 0xe5, 0x03, 0x0a, 0x11, 0x4f, 0x6e, 0x52, 0x65,
	0x63, 0x65, 0x69, 0x76, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x12, 0x87, 0x01,
	0x0a, 0x18, 0x42, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x65, 0x64,
	0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x41, 0x64, 0x64, 0x65, 0x64, 0x12, 0x34, 0x2e, 0x67, 0x61, 0x67,
	0x61, 0x72, 0x69, 0x6e, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x42, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x65, 0x64, 0x42,
	0x6c, 0x6f, 0x63, 0x6b, 0x41, 0x64, 0x64, 0x65, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x35, 0x2e, 0x67, 0x61, 0x67, 0x61, 0x72, 0x69, 0x6e, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x42, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x50, 0x72, 0x6f,
	0x70, 0x6f, 0x73, 0x65, 0x64, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x41, 0x64, 0x64, 0x65, 0x64, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x84, 0x01, 0x0a, 0x17, 0x41, 0x66, 0x74, 0x65,
	0x72, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x65, 0x64, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x41, 0x64,
	0x64, 0x65, 0x64, 0x12, 0x33, 0x2e, 0x67, 0x61, 0x67, 0x61, 0x72, 0x69, 0x6e, 0x2e, 0x6e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x41, 0x66, 0x74, 0x65, 0x72, 0x50,
	0x72, 0x6f, 0x70, 0x6f, 0x73, 0x65, 0x64, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x41, 0x64, 0x64, 0x65,
	0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x34, 0x2e, 0x67, 0x61, 0x67, 0x61, 0x72,
	0x69, 0x6e, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x41,
	0x66, 0x74, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x65, 0x64, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x41, 0x64, 0x64, 0x65, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x60,
	0x0a, 0x0b, 0x42, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x56, 0x6f, 0x74, 0x65, 0x64, 0x12, 0x27, 0x2e,
	0x67, 0x61, 0x67, 0x61, 0x72, 0x69, 0x6e, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x42, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x56, 0x6f, 0x74, 0x65, 0x64, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x67, 0x61, 0x67, 0x61, 0x72, 0x69, 0x6e,
	0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x42, 0x65, 0x66,
	0x6f, 0x72, 0x65, 0x56, 0x6f, 0x74, 0x65, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x5d, 0x0a, 0x0a, 0x41, 0x66, 0x74, 0x65, 0x72, 0x56, 0x6f, 0x74, 0x65, 0x64, 0x12, 0x26,
	0x2e, 0x67, 0x61, 0x67, 0x61, 0x72, 0x69, 0x6e, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x41, 0x66, 0x74, 0x65, 0x72, 0x56, 0x6f, 0x74, 0x65, 0x64, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x67, 0x61, 0x67, 0x61, 0x72, 0x69, 0x6e,
	0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x41, 0x66, 0x74,
	0x65, 0x72, 0x56, 0x6f, 0x74, 0x65, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32,
	0x6b, 0x0a, 0x0a, 0x4f, 0x6e, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x12, 0x5d, 0x0a,
	0x0a, 0x4f, 0x6e, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x12, 0x26, 0x2e, 0x67, 0x61,
	0x67, 0x61, 0x72, 0x69, 0x6e, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x4f, 0x6e, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x67, 0x61, 0x67, 0x61, 0x72, 0x69, 0x6e, 0x2e, 0x6e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4f, 0x6e, 0x50, 0x72, 0x6f, 0x70,
	0x6f, 0x73, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32, 0xe0, 0x01, 0x0a,
	0x0e, 0x4f, 0x6e, 0x56, 0x6f, 0x74, 0x65, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x12,
	0x69, 0x0a, 0x0e, 0x4f, 0x6e, 0x56, 0x6f, 0x74, 0x65, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65,
	0x64, 0x12, 0x2a, 0x2e, 0x67, 0x61, 0x67, 0x61, 0x72, 0x69, 0x6e, 0x2e, 0x6e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4f, 0x6e, 0x56, 0x6f, 0x74, 0x65, 0x52, 0x65,
	0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e,
	0x67, 0x61, 0x67, 0x61, 0x72, 0x69, 0x6e, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x4f, 0x6e, 0x56, 0x6f, 0x74, 0x65, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76,
	0x65, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x63, 0x0a, 0x0c, 0x4f, 0x6e,
	0x51, 0x43, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x12, 0x28, 0x2e, 0x67, 0x61, 0x67,
	0x61, 0x72, 0x69, 0x6e, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x4f, 0x6e, 0x51, 0x43, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x67, 0x61, 0x67, 0x61, 0x72, 0x69, 0x6e, 0x2e, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4f, 0x6e, 0x51, 0x43, 0x46,
	0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32,
	0x87, 0x01, 0x0a, 0x11, 0x4f, 0x6e, 0x4e, 0x65, 0x77, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x72, 0x0a, 0x11, 0x4f, 0x6e, 0x4e, 0x65, 0x77, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x2d, 0x2e, 0x67, 0x61, 0x67,
	0x61, 0x72, 0x69, 0x6e, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x4f, 0x6e, 0x4e, 0x65, 0x77, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x67, 0x61, 0x67, 0x61,
	0x72, 0x69, 0x6e, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x4f, 0x6e, 0x4e, 0x65, 0x77, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32, 0x77, 0x0a, 0x0d, 0x4f, 0x6e, 0x42,
	0x6c, 0x6f, 0x63, 0x6b, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x12, 0x66, 0x0a, 0x0d, 0x4f, 0x6e,
	0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x12, 0x29, 0x2e, 0x67, 0x61,
	0x67, 0x61, 0x72, 0x69, 0x6e, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x4f, 0x6e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x67, 0x61, 0x67, 0x61, 0x72, 0x69, 0x6e,
	0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4f, 0x6e, 0x42,
	0x6c, 0x6f, 0x63, 0x6b, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x32, 0x6b, 0x0a, 0x0a, 0x4f, 0x6e, 0x4e, 0x65, 0x78, 0x74, 0x56, 0x69, 0x65, 0x77,
	0x12, 0x5d, 0x0a, 0x0a, 0x4f, 0x6e, 0x4e, 0x65, 0x78, 0x74, 0x56, 0x69, 0x65, 0x77, 0x12, 0x26,
	0x2e, 0x67, 0x61, 0x67, 0x61, 0x72, 0x69, 0x6e, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4f, 0x6e, 0x4e, 0x65, 0x78, 0x74, 0x56, 0x69, 0x65, 0x77, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x67, 0x61, 0x67, 0x61, 0x72, 0x69, 0x6e,
	0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4f, 0x6e, 0x4e,
	0x65, 0x78, 0x74, 0x56, 0x69, 0x65, 0x77, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32,
	0x6f, 0x0a, 0x0b, 0x4f, 0x6e, 0x4e, 0x65, 0x78, 0x74, 0x45, 0x70, 0x6f, 0x63, 0x68, 0x12, 0x60,
	0x0a, 0x0b, 0x4f, 0x6e, 0x4e, 0x65, 0x78, 0x74, 0x45, 0x70, 0x6f, 0x63, 0x68, 0x12, 0x27, 0x2e,
	0x67, 0x61, 0x67, 0x61, 0x72, 0x69, 0x6e, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x4f, 0x6e, 0x4e, 0x65, 0x78, 0x74, 0x45, 0x70, 0x6f, 0x63, 0x68, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x67, 0x61, 0x67, 0x61, 0x72, 0x69, 0x6e,
	0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4f, 0x6e, 0x4e,
	0x65, 0x78, 0x74, 0x45, 0x70, 0x6f, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x32, 0xef, 0x0e, 0x0a, 0x0d, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x12, 0x69, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x42, 0x79,
	0x48, 0x61, 0x73, 0x68, 0x12, 0x2a, 0x2e, 0x67, 0x61, 0x67, 0x61, 0x72, 0x69, 0x6e, 0x2e, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x42, 0x79, 0x48, 0x61, 0x73, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x2b, 0x2e, 0x67, 0x61, 0x67, 0x61, 0x72, 0x69, 0x6e, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x42,
	0x79, 0x48, 0x61, 0x73, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x70, 0x0a,
	0x11, 0x47, 0x65, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x42, 0x79, 0x48, 0x65, 0x69, 0x67,
	0x68, 0x74, 0x12, 0x2c, 0x2e, 0x67, 0x61, 0x67, 0x61, 0x72, 0x69, 0x6e, 0x2e, 0x6e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x42, 0x79, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x2d, 0x2e, 0x67, 0x61, 0x67, 0x61, 0x72, 0x69, 0x6e, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x42,
	0x79, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x54, 0x0a, 0x07, 0x47, 0x65, 0x74, 0x46, 0x6f, 0x72, 0x6b, 0x12, 0x23, 0x2e, 0x67, 0x61, 0x67,
	0x61, 0x72, 0x69, 0x6e, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x47, 0x65, 0x74, 0x46, 0x6f, 0x72, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x24, 0x2e, 0x67, 0x61, 0x67, 0x61, 0x72, 0x69, 0x6e, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x46, 0x6f, 0x72, 0x6b, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x57, 0x0a, 0x08, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e,
	0x73, 0x12, 0x24, 0x2e, 0x67, 0x61, 0x67, 0x61, 0x72, 0x69, 0x6e, 0x2e, 0x6e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x67, 0x61, 0x67, 0x61, 0x72, 0x69,
	0x6e, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x43, 0x6f,
	0x6e, 0x74, 0x61, 0x69, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x66,
	0x0a, 0x0d, 0x47, 0x65, 0x74, 0x54, 0x68, 0x72, 0x65, 0x65, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x12,
	0x29, 0x2e, 0x67, 0x61, 0x67, 0x61, 0x72, 0x69, 0x6e, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x68, 0x72, 0x65, 0x65, 0x43, 0x68,
	0x61, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x67, 0x61, 0x67,
	0x61, 0x72, 0x69, 0x6e, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x47, 0x65, 0x74, 0x54, 0x68, 0x72, 0x65, 0x65, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x54, 0x0a, 0x07, 0x47, 0x65, 0x74, 0x48, 0x65, 0x61,
	0x64, 0x12, 0x23, 0x2e, 0x67, 0x61, 0x67, 0x61, 0x72, 0x69, 0x6e, 0x2e, 0x6e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x48, 0x65, 0x61, 0x64, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x67, 0x61, 0x67, 0x61, 0x72, 0x69, 0x6e,
	0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x47, 0x65, 0x74,
	0x48, 0x65, 0x61, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x63, 0x0a, 0x0c,
	0x47, 0x65, 0x74, 0x54, 0x6f, 0x70, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x28, 0x2e, 0x67,
	0x61, 0x67, 0x61, 0x72, 0x69, 0x6e, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x6f, 0x70, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x67, 0x61, 0x67, 0x61, 0x72, 0x69, 0x6e,
	0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x47, 0x65, 0x74,
	0x54, 0x6f, 0x70, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x72, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x54, 0x6f, 0x70, 0x48, 0x65, 0x69, 0x67, 0x68,
	0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x2d, 0x2e, 0x67, 0x61, 0x67, 0x61, 0x72, 0x69, 0x6e,
	0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x47, 0x65, 0x74,
	0x54, 0x6f, 0x70, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x67, 0x61, 0x67, 0x61, 0x72, 0x69, 0x6e, 0x2e,
	0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x54,
	0x6f, 0x70, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6c, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x47, 0x65, 0x6e, 0x65,
	0x73, 0x69, 0x73, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x2b, 0x2e, 0x67, 0x61, 0x67, 0x61, 0x72,
	0x69, 0x6e, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x47,
	0x65, 0x74, 0x47, 0x65, 0x6e, 0x65, 0x73, 0x69, 0x73, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x67, 0x61, 0x67, 0x61, 0x72, 0x69, 0x6e, 0x2e,
	0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x47,
	0x65, 0x6e, 0x65, 0x73, 0x69, 0x73, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x5a, 0x0a, 0x09, 0x49, 0x73, 0x53, 0x69, 0x62, 0x6c, 0x69, 0x6e, 0x67,
	0x12, 0x25, 0x2e, 0x67, 0x61, 0x67, 0x61, 0x72, 0x69, 0x6e, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x49, 0x73, 0x53, 0x69, 0x62, 0x6c, 0x69, 0x6e, 0x67,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x67, 0x61, 0x67, 0x61, 0x72, 0x69,
	0x6e, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x49, 0x73,
	0x53, 0x69, 0x62, 0x6c, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x5d, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x26, 0x2e,
	0x67, 0x61, 0x67, 0x61, 0x72, 0x69, 0x6e, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x67, 0x61, 0x67, 0x61, 0x72, 0x69, 0x6e, 0x2e,
	0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x69,
	0x0a, 0x0e, 0x47, 0x65, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x2a, 0x2e, 0x67, 0x61, 0x67, 0x61, 0x72, 0x69, 0x6e, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x67,
	0x61, 0x67, 0x61, 0x72, 0x69, 0x6e, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x75, 0x0a, 0x12, 0x47, 0x65, 0x74,
	0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x65, 0x72, 0x46, 0x6f, 0x72, 0x56, 0x69, 0x65, 0x77, 0x12,
	0x2e, 0x2e, 0x67, 0x61, 0x67, 0x61, 0x72, 0x69, 0x6e, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x65,
	0x72, 0x46, 0x6f, 0x72, 0x56, 0x69, 0x65, 0x77, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x2f, 0x2e, 0x67, 0x61, 0x67, 0x61, 0x72, 0x69, 0x6e, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x65,
	0x72, 0x46, 0x6f, 0x72, 0x56, 0x69, 0x65, 0x77, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x63, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x65,
	0x12, 0x28, 0x2e, 0x67, 0x61, 0x67, 0x61, 0x72, 0x69, 0x6e, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74,
	0x74, 0x65, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x67, 0x61, 0x67,
	0x61, 0x72, 0x69, 0x6e, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x69, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x43, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x74, 0x56, 0x69, 0x65, 0x77, 0x12, 0x2a, 0x2e, 0x67, 0x61, 0x67, 0x61, 0x72, 0x69,
	0x6e, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x47, 0x65,
	0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x56, 0x69, 0x65, 0x77, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x67, 0x61, 0x67, 0x61, 0x72, 0x69, 0x6e, 0x2e, 0x6e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x74, 0x56, 0x69, 0x65, 0x77, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x6c, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x45, 0x70,
	0x6f, 0x63, 0x68, 0x12, 0x2b, 0x2e, 0x67, 0x61, 0x67, 0x61, 0x72, 0x69, 0x6e, 0x2e, 0x6e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x74, 0x45, 0x70, 0x6f, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x2c, 0x2e, 0x67, 0x61, 0x67, 0x61, 0x72, 0x69, 0x6e, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x74, 0x45, 0x70, 0x6f, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x7b,
	0x0a, 0x14, 0x47, 0x65, 0x74, 0x54, 0x6f, 0x70, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x74, 0x65,
	0x64, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x30, 0x2e, 0x67, 0x61, 0x67, 0x61, 0x72, 0x69, 0x6e,
	0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x47, 0x65, 0x74,
	0x54, 0x6f, 0x70, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x31, 0x2e, 0x67, 0x61, 0x67, 0x61, 0x72,
	0x69, 0x6e, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x47,
	0x65, 0x74, 0x54, 0x6f, 0x70, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x75, 0x0a, 0x12, 0x45,
	0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x2e, 0x2e, 0x67, 0x61, 0x67, 0x61, 0x72, 0x69, 0x6e, 0x2e, 0x6e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x2f, 0x2e, 0x67, 0x61, 0x67, 0x61, 0x72, 0x69, 0x6e, 0x2e, 0x6e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x42, 0x04, 0x5a, 0x02, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_api_proto_rawDescOnce sync.Once
	file_api_proto_rawDescData = file_api_proto_rawDesc
)

func file_api_proto_rawDescGZIP() []byte {
	file_api_proto_rawDescOnce.Do(func() {
		file_api_proto_rawDescData = protoimpl.X.CompressGZIP(file_api_proto_rawDescData)
	})
	return file_api_proto_rawDescData
}

var file_api_proto_msgTypes = make([]protoimpl.MessageInfo, 58)
var file_api_proto_goTypes = []interface{}{
	(*OnBlockCommitRequest)(nil),             // 0: gagarin.network.api.OnBlockCommitRequest
	(*OnBlockCommitResponse)(nil),            // 1: gagarin.network.api.OnBlockCommitResponse
	(*BeforeProposedBlockAddedRequest)(nil),  // 2: gagarin.network.api.BeforeProposedBlockAddedRequest
	(*BeforeProposedBlockAddedResponse)(nil), // 3: gagarin.network.api.BeforeProposedBlockAddedResponse
	(*AfterProposedBlockAddedRequest)(nil),   // 4: gagarin.network.api.AfterProposedBlockAddedRequest
	(*AfterProposedBlockAddedResponse)(nil),  // 5: gagarin.network.api.AfterProposedBlockAddedResponse
	(*BeforeVotedRequest)(nil),               // 6: gagarin.network.api.BeforeVotedRequest
	(*BeforeVotedResponse)(nil),              // 7: gagarin.network.api.BeforeVotedResponse
	(*AfterVotedRequest)(nil),                // 8: gagarin.network.api.AfterVotedRequest
	(*AfterVotedResponse)(nil),               // 9: gagarin.network.api.AfterVotedResponse
	(*OnProposalRequest)(nil),                // 10: gagarin.network.api.OnProposalRequest
	(*OnProposalResponse)(nil),               // 11: gagarin.network.api.OnProposalResponse
	(*OnVoteReceivedRequest)(nil),            // 12: gagarin.network.api.OnVoteReceivedRequest
	(*OnVoteReceivedResponse)(nil),           // 13: gagarin.network.api.OnVoteReceivedResponse
	(*OnQCFinishedRequest)(nil),              // 14: gagarin.network.api.OnQCFinishedRequest
	(*OnQCFinishedResponse)(nil),             // 15: gagarin.network.api.OnQCFinishedResponse
	(*OnNextViewRequest)(nil),                // 16: gagarin.network.api.OnNextViewRequest
	(*OnNextViewResponse)(nil),               // 17: gagarin.network.api.OnNextViewResponse
	(*OnNextEpochRequest)(nil),               // 18: gagarin.network.api.OnNextEpochRequest
	(*OnNextEpochResponse)(nil),              // 19: gagarin.network.api.OnNextEpochResponse
	(*OnNewBlockCreatedRequest)(nil),         // 20: gagarin.network.api.OnNewBlockCreatedRequest
	(*OnNewBlockCreatedResponse)(nil),        // 21: gagarin.network.api.OnNewBlockCreatedResponse
	(*GetBlockByHashRequest)(nil),            // 22: gagarin.network.api.GetBlockByHashRequest
	(*GetBlockByHashResponse)(nil),           // 23: gagarin.network.api.GetBlockByHashResponse
	(*GetBlockByHeightRequest)(nil),          // 24: gagarin.network.api.GetBlockByHeightRequest
	(*GetBlockByHeightResponse)(nil),         // 25: gagarin.network.api.GetBlockByHeightResponse
	(*GetForkRequest)(nil),                   // 26: gagarin.network.api.GetForkRequest
	(*GetForkResponse)(nil),                  // 27: gagarin.network.api.GetForkResponse
	(*ContainsRequest)(nil),                  // 28: gagarin.network.api.ContainsRequest
	(*ContainsResponse)(nil),                 // 29: gagarin.network.api.ContainsResponse
	(*GetThreeChainRequest)(nil),             // 30: gagarin.network.api.GetThreeChainRequest
	(*GetThreeChainResponse)(nil),            // 31: gagarin.network.api.GetThreeChainResponse
	(*GetHeadRequest)(nil),                   // 32: gagarin.network.api.GetHeadRequest
	(*GetHeadResponse)(nil),                  // 33: gagarin.network.api.GetHeadResponse
	(*GetTopHeightRequest)(nil),              // 34: gagarin.network.api.GetTopHeightRequest
	(*GetTopHeightResponse)(nil),             // 35: gagarin.network.api.GetTopHeightResponse
	(*GetTopHeightBlockRequest)(nil),         // 36: gagarin.network.api.GetTopHeightBlockRequest
	(*GetTopHeightBlockResponse)(nil),        // 37: gagarin.network.api.GetTopHeightBlockResponse
	(*GetGenesisBlockRequest)(nil),           // 38: gagarin.network.api.GetGenesisBlockRequest
	(*GetGenesisBlockResponse)(nil),          // 39: gagarin.network.api.GetGenesisBlockResponse
	(*IsSiblingRequest)(nil),                 // 40: gagarin.network.api.IsSiblingRequest
	(*IsSiblingResponse)(nil),                // 41: gagarin.network.api.IsSiblingResponse
	(*GetAccountRequest)(nil),                // 42: gagarin.network.api.GetAccountRequest
	(*GetAccountResponse)(nil),               // 43: gagarin.network.api.GetAccountResponse
	(*GetTransactionRequest)(nil),            // 44: gagarin.network.api.GetTransactionRequest
	(*GetTransactionResponse)(nil),           // 45: gagarin.network.api.GetTransactionResponse
	(*GetProposerForViewRequest)(nil),        // 46: gagarin.network.api.GetProposerForViewRequest
	(*GetProposerForViewResponse)(nil),       // 47: gagarin.network.api.GetProposerForViewResponse
	(*GetCommitteeRequest)(nil),              // 48: gagarin.network.api.GetCommitteeRequest
	(*GetCommitteeResponse)(nil),             // 49: gagarin.network.api.GetCommitteeResponse
	(*GetCurrentViewRequest)(nil),            // 50: gagarin.network.api.GetCurrentViewRequest
	(*GetCurrentViewResponse)(nil),           // 51: gagarin.network.api.GetCurrentViewResponse
	(*GetCurrentEpochRequest)(nil),           // 52: gagarin.network.api.GetCurrentEpochRequest
	(*GetCurrentEpochResponse)(nil),          // 53: gagarin.network.api.GetCurrentEpochResponse
	(*GetTopCommittedBlockRequest)(nil),      // 54: gagarin.network.api.GetTopCommittedBlockRequest
	(*GetTopCommittedBlockResponse)(nil),     // 55: gagarin.network.api.GetTopCommittedBlockResponse
	(*ExecuteTransactionRequest)(nil),        // 56: gagarin.network.api.ExecuteTransactionRequest
	(*ExecuteTransactionResponse)(nil),       // 57: gagarin.network.api.ExecuteTransactionResponse
	(*Peer)(nil),                             // 58: gagarin.network.storage.Peer
	(*BlockS)(nil),                           // 59: gagarin.network.storage.BlockS
	(*ProposalPayload)(nil),                  // 60: gagarin.network.core.ProposalPayload
	(*Receipt)(nil),                          // 61: gagarin.network.storage.Receipt
	(*VotePayload)(nil),                      // 62: gagarin.network.core.VotePayload
	(*QuorumCertificateS)(nil),               // 63: gagarin.network.storage.QuorumCertificateS
	(*Account)(nil),                          // 64: gagarin.network.storage.Account
	(*TransactionS)(nil),                     // 65: gagarin.network.storage.TransactionS
}
var file_api_proto_depIdxs = []int32{
	58, // 0: gagarin.network.api.OnBlockCommitRequest.me:type_name -> gagarin.network.storage.Peer
	59, // 1: gagarin.network.api.OnBlockCommitRequest.block:type_name -> gagarin.network.storage.BlockS
	59, // 2: gagarin.network.api.OnBlockCommitRequest.orphans:type_name -> gagarin.network.storage.BlockS
	58, // 3: gagarin.network.api.BeforeProposedBlockAddedRequest.me:type_name -> gagarin.network.storage.Peer
	60, // 4: gagarin.network.api.BeforeProposedBlockAddedRequest.proposal:type_name -> gagarin.network.core.ProposalPayload
	60, // 5: gagarin.network.api.BeforeProposedBlockAddedResponse.proposal:type_name -> gagarin.network.core.ProposalPayload
	58, // 6: gagarin.network.api.AfterProposedBlockAddedRequest.me:type_name -> gagarin.network.storage.Peer
	60, // 7: gagarin.network.api.AfterProposedBlockAddedRequest.proposal:type_name -> gagarin.network.core.ProposalPayload
	61, // 8: gagarin.network.api.AfterProposedBlockAddedRequest.receipts:type_name -> gagarin.network.storage.Receipt
	58, // 9: gagarin.network.api.BeforeVotedRequest.me:type_name -> gagarin.network.storage.Peer
	62, // 10: gagarin.network.api.BeforeVotedRequest.vote:type_name -> gagarin.network.core.VotePayload
	62, // 11: gagarin.network.api.BeforeVotedResponse.vote:type_name -> gagarin.network.core.VotePayload
	58, // 12: gagarin.network.api.AfterVotedRequest.me:type_name -> gagarin.network.storage.Peer
	62, // 13: gagarin.network.api.AfterVotedRequest.vote:type_name -> gagarin.network.core.VotePayload
	58, // 14: gagarin.network.api.OnProposalRequest.me:type_name -> gagarin.network.storage.Peer
	60, // 15: gagarin.network.api.OnProposalRequest.proposal:type_name -> gagarin.network.core.ProposalPayload
	58, // 16: gagarin.network.api.OnVoteReceivedRequest.me:type_name -> gagarin.network.storage.Peer
	62, // 17: gagarin.network.api.OnVoteReceivedRequest.vote:type_name -> gagarin.network.core.VotePayload
	58, // 18: gagarin.network.api.OnQCFinishedRequest.me:type_name -> gagarin.network.storage.Peer
	63, // 19: gagarin.network.api.OnQCFinishedRequest.qc:type_name -> gagarin.network.storage.QuorumCertificateS
	63, // 20: gagarin.network.api.OnQCFinishedResponse.qc:type_name -> gagarin.network.storage.QuorumCertificateS
	58, // 21: gagarin.network.api.OnNextViewRequest.me:type_name -> gagarin.network.storage.Peer
	58, // 22: gagarin.network.api.OnNextEpochRequest.me:type_name -> gagarin.network.storage.Peer
	58, // 23: gagarin.network.api.OnNewBlockCreatedRequest.me:type_name -> gagarin.network.storage.Peer
	59, // 24: gagarin.network.api.OnNewBlockCreatedRequest.block:type_name -> gagarin.network.storage.BlockS
	61, // 25: gagarin.network.api.OnNewBlockCreatedRequest.receipts:type_name -> gagarin.network.storage.Receipt
	59, // 26: gagarin.network.api.OnNewBlockCreatedResponse.block:type_name -> gagarin.network.storage.BlockS
	59, // 27: gagarin.network.api.GetBlockByHashResponse.block:type_name -> gagarin.network.storage.BlockS
	59, // 28: gagarin.network.api.GetBlockByHeightResponse.blocks:type_name -> gagarin.network.storage.BlockS
	59, // 29: gagarin.network.api.GetForkResponse.blocks:type_name -> gagarin.network.storage.BlockS
	59, // 30: gagarin.network.api.GetThreeChainResponse.zero:type_name -> gagarin.network.storage.BlockS
	59, // 31: gagarin.network.api.GetThreeChainResponse.one:type_name -> gagarin.network.storage.BlockS
	59, // 32: gagarin.network.api.GetThreeChainResponse.two:type_name -> gagarin.network.storage.BlockS
	59, // 33: gagarin.network.api.GetHeadResponse.block:type_name -> gagarin.network.storage.BlockS
	59, // 34: gagarin.network.api.GetTopHeightBlockResponse.block:type_name -> gagarin.network.storage.BlockS
	59, // 35: gagarin.network.api.GetGenesisBlockResponse.block:type_name -> gagarin.network.storage.BlockS
	64, // 36: gagarin.network.api.GetAccountResponse.account:type_name -> gagarin.network.storage.Account
	65, // 37: gagarin.network.api.GetTransactionResponse.tx:type_name -> gagarin.network.storage.TransactionS
	58, // 38: gagarin.network.api.GetProposerForViewResponse.peer:type_name -> gagarin.network.storage.Peer
	58, // 39: gagarin.network.api.GetCommitteeResponse.peer:type_name -> gagarin.network.storage.Peer
	59, // 40: gagarin.network.api.GetTopCommittedBlockResponse.block:type_name -> gagarin.network.storage.BlockS
	65, // 41: gagarin.network.api.ExecuteTransactionRequest.tx:type_name -> gagarin.network.storage.TransactionS
	2,  // 42: gagarin.network.api.OnReceiveProposal.BeforeProposedBlockAdded:input_type -> gagarin.network.api.BeforeProposedBlockAddedRequest
	4,  // 43: gagarin.network.api.OnReceiveProposal.AfterProposedBlockAdded:input_type -> gagarin.network.api.AfterProposedBlockAddedRequest
	6,  // 44: gagarin.network.api.OnReceiveProposal.BeforeVoted:input_type -> gagarin.network.api.BeforeVotedRequest
	8,  // 45: gagarin.network.api.OnReceiveProposal.AfterVoted:input_type -> gagarin.network.api.AfterVotedRequest
	10, // 46: gagarin.network.api.OnProposal.OnProposal:input_type -> gagarin.network.api.OnProposalRequest
	12, // 47: gagarin.network.api.OnVoteReceived.OnVoteReceived:input_type -> gagarin.network.api.OnVoteReceivedRequest
	14, // 48: gagarin.network.api.OnVoteReceived.OnQCFinished:input_type -> gagarin.network.api.OnQCFinishedRequest
	20, // 49: gagarin.network.api.OnNewBlockCreated.OnNewBlockCreated:input_type -> gagarin.network.api.OnNewBlockCreatedRequest
	0,  // 50: gagarin.network.api.OnBlockCommit.OnBlockCommit:input_type -> gagarin.network.api.OnBlockCommitRequest
	16, // 51: gagarin.network.api.OnNextView.OnNextView:input_type -> gagarin.network.api.OnNextViewRequest
	18, // 52: gagarin.network.api.OnNextEpoch.OnNextEpoch:input_type -> gagarin.network.api.OnNextEpochRequest
	22, // 53: gagarin.network.api.CommonService.GetBlockByHash:input_type -> gagarin.network.api.GetBlockByHashRequest
	24, // 54: gagarin.network.api.CommonService.GetBlocksByHeight:input_type -> gagarin.network.api.GetBlockByHeightRequest
	26, // 55: gagarin.network.api.CommonService.GetFork:input_type -> gagarin.network.api.GetForkRequest
	28, // 56: gagarin.network.api.CommonService.Contains:input_type -> gagarin.network.api.ContainsRequest
	30, // 57: gagarin.network.api.CommonService.GetThreeChain:input_type -> gagarin.network.api.GetThreeChainRequest
	32, // 58: gagarin.network.api.CommonService.GetHead:input_type -> gagarin.network.api.GetHeadRequest
	34, // 59: gagarin.network.api.CommonService.GetTopHeight:input_type -> gagarin.network.api.GetTopHeightRequest
	36, // 60: gagarin.network.api.CommonService.GetTopHeightBlock:input_type -> gagarin.network.api.GetTopHeightBlockRequest
	38, // 61: gagarin.network.api.CommonService.GetGenesisBlock:input_type -> gagarin.network.api.GetGenesisBlockRequest
	40, // 62: gagarin.network.api.CommonService.IsSibling:input_type -> gagarin.network.api.IsSiblingRequest
	42, // 63: gagarin.network.api.CommonService.GetAccount:input_type -> gagarin.network.api.GetAccountRequest
	44, // 64: gagarin.network.api.CommonService.GetTransaction:input_type -> gagarin.network.api.GetTransactionRequest
	46, // 65: gagarin.network.api.CommonService.GetProposerForView:input_type -> gagarin.network.api.GetProposerForViewRequest
	48, // 66: gagarin.network.api.CommonService.GetCommittee:input_type -> gagarin.network.api.GetCommitteeRequest
	50, // 67: gagarin.network.api.CommonService.GetCurrentView:input_type -> gagarin.network.api.GetCurrentViewRequest
	52, // 68: gagarin.network.api.CommonService.GetCurrentEpoch:input_type -> gagarin.network.api.GetCurrentEpochRequest
	54, // 69: gagarin.network.api.CommonService.GetTopCommittedBlock:input_type -> gagarin.network.api.GetTopCommittedBlockRequest
	56, // 70: gagarin.network.api.CommonService.ExecuteTransaction:input_type -> gagarin.network.api.ExecuteTransactionRequest
	3,  // 71: gagarin.network.api.OnReceiveProposal.BeforeProposedBlockAdded:output_type -> gagarin.network.api.BeforeProposedBlockAddedResponse
	5,  // 72: gagarin.network.api.OnReceiveProposal.AfterProposedBlockAdded:output_type -> gagarin.network.api.AfterProposedBlockAddedResponse
	7,  // 73: gagarin.network.api.OnReceiveProposal.BeforeVoted:output_type -> gagarin.network.api.BeforeVotedResponse
	9,  // 74: gagarin.network.api.OnReceiveProposal.AfterVoted:output_type -> gagarin.network.api.AfterVotedResponse
	11, // 75: gagarin.network.api.OnProposal.OnProposal:output_type -> gagarin.network.api.OnProposalResponse
	13, // 76: gagarin.network.api.OnVoteReceived.OnVoteReceived:output_type -> gagarin.network.api.OnVoteReceivedResponse
	15, // 77: gagarin.network.api.OnVoteReceived.OnQCFinished:output_type -> gagarin.network.api.OnQCFinishedResponse
	21, // 78: gagarin.network.api.OnNewBlockCreated.OnNewBlockCreated:output_type -> gagarin.network.api.OnNewBlockCreatedResponse
	1,  // 79: gagarin.network.api.OnBlockCommit.OnBlockCommit:output_type -> gagarin.network.api.OnBlockCommitResponse
	17, // 80: gagarin.network.api.OnNextView.OnNextView:output_type -> gagarin.network.api.OnNextViewResponse
	19, // 81: gagarin.network.api.OnNextEpoch.OnNextEpoch:output_type -> gagarin.network.api.OnNextEpochResponse
	23, // 82: gagarin.network.api.CommonService.GetBlockByHash:output_type -> gagarin.network.api.GetBlockByHashResponse
	25, // 83: gagarin.network.api.CommonService.GetBlocksByHeight:output_type -> gagarin.network.api.GetBlockByHeightResponse
	27, // 84: gagarin.network.api.CommonService.GetFork:output_type -> gagarin.network.api.GetForkResponse
	29, // 85: gagarin.network.api.CommonService.Contains:output_type -> gagarin.network.api.ContainsResponse
	31, // 86: gagarin.network.api.CommonService.GetThreeChain:output_type -> gagarin.network.api.GetThreeChainResponse
	33, // 87: gagarin.network.api.CommonService.GetHead:output_type -> gagarin.network.api.GetHeadResponse
	35, // 88: gagarin.network.api.CommonService.GetTopHeight:output_type -> gagarin.network.api.GetTopHeightResponse
	37, // 89: gagarin.network.api.CommonService.GetTopHeightBlock:output_type -> gagarin.network.api.GetTopHeightBlockResponse
	39, // 90: gagarin.network.api.CommonService.GetGenesisBlock:output_type -> gagarin.network.api.GetGenesisBlockResponse
	41, // 91: gagarin.network.api.CommonService.IsSibling:output_type -> gagarin.network.api.IsSiblingResponse
	43, // 92: gagarin.network.api.CommonService.GetAccount:output_type -> gagarin.network.api.GetAccountResponse
	45, // 93: gagarin.network.api.CommonService.GetTransaction:output_type -> gagarin.network.api.GetTransactionResponse
	47, // 94: gagarin.network.api.CommonService.GetProposerForView:output_type -> gagarin.network.api.GetProposerForViewResponse
	49, // 95: gagarin.network.api.CommonService.GetCommittee:output_type -> gagarin.network.api.GetCommitteeResponse
	51, // 96: gagarin.network.api.CommonService.GetCurrentView:output_type -> gagarin.network.api.GetCurrentViewResponse
	53, // 97: gagarin.network.api.CommonService.GetCurrentEpoch:output_type -> gagarin.network.api.GetCurrentEpochResponse
	55, // 98: gagarin.network.api.CommonService.GetTopCommittedBlock:output_type -> gagarin.network.api.GetTopCommittedBlockResponse
	57, // 99: gagarin.network.api.CommonService.ExecuteTransaction:output_type -> gagarin.network.api.ExecuteTransactionResponse
	71, // [71:100] is the sub-list for method output_type
	42, // [42:71] is the sub-list for method input_type
	42, // [42:42] is the sub-list for extension type_name
	42, // [42:42] is the sub-list for extension extendee
	0,  // [0:42] is the sub-list for field type_name
}

func init() { file_api_proto_init() }
func file_api_proto_init() {
	if File_api_proto != nil {
		return
	}
	file_storage_proto_init()
	file_message_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_api_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OnBlockCommitRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OnBlockCommitResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BeforeProposedBlockAddedRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BeforeProposedBlockAddedResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AfterProposedBlockAddedRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AfterProposedBlockAddedResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BeforeVotedRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BeforeVotedResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AfterVotedRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AfterVotedResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OnProposalRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OnProposalResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OnVoteReceivedRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OnVoteReceivedResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OnQCFinishedRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OnQCFinishedResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OnNextViewRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OnNextViewResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OnNextEpochRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OnNextEpochResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OnNewBlockCreatedRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OnNewBlockCreatedResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetBlockByHashRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetBlockByHashResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetBlockByHeightRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetBlockByHeightResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetForkRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetForkResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContainsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContainsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetThreeChainRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetThreeChainResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetHeadRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetHeadResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTopHeightRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTopHeightResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTopHeightBlockRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTopHeightBlockResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetGenesisBlockRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetGenesisBlockResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IsSiblingRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IsSiblingResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAccountRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAccountResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTransactionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTransactionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetProposerForViewRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetProposerForViewResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCommitteeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCommitteeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCurrentViewRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCurrentViewResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCurrentEpochRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCurrentEpochResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTopCommittedBlockRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTopCommittedBlockResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExecuteTransactionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExecuteTransactionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_api_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   58,
			NumExtensions: 0,
			NumServices:   8,
		},
		GoTypes:           file_api_proto_goTypes,
		DependencyIndexes: file_api_proto_depIdxs,
		MessageInfos:      file_api_proto_msgTypes,
	}.Build()
	File_api_proto = out.File
	file_api_proto_rawDesc = nil
	file_api_proto_goTypes = nil
	file_api_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// OnReceiveProposalClient is the client API for OnReceiveProposal service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type OnReceiveProposalClient interface {
	BeforeProposedBlockAdded(ctx context.Context, in *BeforeProposedBlockAddedRequest, opts ...grpc.CallOption) (*BeforeProposedBlockAddedResponse, error)
	AfterProposedBlockAdded(ctx context.Context, in *AfterProposedBlockAddedRequest, opts ...grpc.CallOption) (*AfterProposedBlockAddedResponse, error)
	BeforeVoted(ctx context.Context, in *BeforeVotedRequest, opts ...grpc.CallOption) (*BeforeVotedResponse, error)
	AfterVoted(ctx context.Context, in *AfterVotedRequest, opts ...grpc.CallOption) (*AfterVotedResponse, error)
}

type onReceiveProposalClient struct {
	cc grpc.ClientConnInterface
}

func NewOnReceiveProposalClient(cc grpc.ClientConnInterface) OnReceiveProposalClient {
	return &onReceiveProposalClient{cc}
}

func (c *onReceiveProposalClient) BeforeProposedBlockAdded(ctx context.Context, in *BeforeProposedBlockAddedRequest, opts ...grpc.CallOption) (*BeforeProposedBlockAddedResponse, error) {
	out := new(BeforeProposedBlockAddedResponse)
	err := c.cc.Invoke(ctx, "/gagarin.network.api.OnReceiveProposal/BeforeProposedBlockAdded", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *onReceiveProposalClient) AfterProposedBlockAdded(ctx context.Context, in *AfterProposedBlockAddedRequest, opts ...grpc.CallOption) (*AfterProposedBlockAddedResponse, error) {
	out := new(AfterProposedBlockAddedResponse)
	err := c.cc.Invoke(ctx, "/gagarin.network.api.OnReceiveProposal/AfterProposedBlockAdded", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *onReceiveProposalClient) BeforeVoted(ctx context.Context, in *BeforeVotedRequest, opts ...grpc.CallOption) (*BeforeVotedResponse, error) {
	out := new(BeforeVotedResponse)
	err := c.cc.Invoke(ctx, "/gagarin.network.api.OnReceiveProposal/BeforeVoted", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *onReceiveProposalClient) AfterVoted(ctx context.Context, in *AfterVotedRequest, opts ...grpc.CallOption) (*AfterVotedResponse, error) {
	out := new(AfterVotedResponse)
	err := c.cc.Invoke(ctx, "/gagarin.network.api.OnReceiveProposal/AfterVoted", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OnReceiveProposalServer is the server API for OnReceiveProposal service.
type OnReceiveProposalServer interface {
	BeforeProposedBlockAdded(context.Context, *BeforeProposedBlockAddedRequest) (*BeforeProposedBlockAddedResponse, error)
	AfterProposedBlockAdded(context.Context, *AfterProposedBlockAddedRequest) (*AfterProposedBlockAddedResponse, error)
	BeforeVoted(context.Context, *BeforeVotedRequest) (*BeforeVotedResponse, error)
	AfterVoted(context.Context, *AfterVotedRequest) (*AfterVotedResponse, error)
}

// UnimplementedOnReceiveProposalServer can be embedded to have forward compatible implementations.
type UnimplementedOnReceiveProposalServer struct {
}

func (*UnimplementedOnReceiveProposalServer) BeforeProposedBlockAdded(context.Context, *BeforeProposedBlockAddedRequest) (*BeforeProposedBlockAddedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BeforeProposedBlockAdded not implemented")
}
func (*UnimplementedOnReceiveProposalServer) AfterProposedBlockAdded(context.Context, *AfterProposedBlockAddedRequest) (*AfterProposedBlockAddedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AfterProposedBlockAdded not implemented")
}
func (*UnimplementedOnReceiveProposalServer) BeforeVoted(context.Context, *BeforeVotedRequest) (*BeforeVotedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BeforeVoted not implemented")
}
func (*UnimplementedOnReceiveProposalServer) AfterVoted(context.Context, *AfterVotedRequest) (*AfterVotedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AfterVoted not implemented")
}

func RegisterOnReceiveProposalServer(s *grpc.Server, srv OnReceiveProposalServer) {
	s.RegisterService(&_OnReceiveProposal_serviceDesc, srv)
}

func _OnReceiveProposal_BeforeProposedBlockAdded_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BeforeProposedBlockAddedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OnReceiveProposalServer).BeforeProposedBlockAdded(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gagarin.network.api.OnReceiveProposal/BeforeProposedBlockAdded",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OnReceiveProposalServer).BeforeProposedBlockAdded(ctx, req.(*BeforeProposedBlockAddedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OnReceiveProposal_AfterProposedBlockAdded_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AfterProposedBlockAddedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OnReceiveProposalServer).AfterProposedBlockAdded(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gagarin.network.api.OnReceiveProposal/AfterProposedBlockAdded",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OnReceiveProposalServer).AfterProposedBlockAdded(ctx, req.(*AfterProposedBlockAddedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OnReceiveProposal_BeforeVoted_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BeforeVotedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OnReceiveProposalServer).BeforeVoted(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gagarin.network.api.OnReceiveProposal/BeforeVoted",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OnReceiveProposalServer).BeforeVoted(ctx, req.(*BeforeVotedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OnReceiveProposal_AfterVoted_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AfterVotedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OnReceiveProposalServer).AfterVoted(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gagarin.network.api.OnReceiveProposal/AfterVoted",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OnReceiveProposalServer).AfterVoted(ctx, req.(*AfterVotedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _OnReceiveProposal_serviceDesc = grpc.ServiceDesc{
	ServiceName: "gagarin.network.api.OnReceiveProposal",
	HandlerType: (*OnReceiveProposalServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "BeforeProposedBlockAdded",
			Handler:    _OnReceiveProposal_BeforeProposedBlockAdded_Handler,
		},
		{
			MethodName: "AfterProposedBlockAdded",
			Handler:    _OnReceiveProposal_AfterProposedBlockAdded_Handler,
		},
		{
			MethodName: "BeforeVoted",
			Handler:    _OnReceiveProposal_BeforeVoted_Handler,
		},
		{
			MethodName: "AfterVoted",
			Handler:    _OnReceiveProposal_AfterVoted_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api.proto",
}

// OnProposalClient is the client API for OnProposal service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type OnProposalClient interface {
	OnProposal(ctx context.Context, in *OnProposalRequest, opts ...grpc.CallOption) (*OnProposalResponse, error)
}

type onProposalClient struct {
	cc grpc.ClientConnInterface
}

func NewOnProposalClient(cc grpc.ClientConnInterface) OnProposalClient {
	return &onProposalClient{cc}
}

func (c *onProposalClient) OnProposal(ctx context.Context, in *OnProposalRequest, opts ...grpc.CallOption) (*OnProposalResponse, error) {
	out := new(OnProposalResponse)
	err := c.cc.Invoke(ctx, "/gagarin.network.api.OnProposal/OnProposal", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OnProposalServer is the server API for OnProposal service.
type OnProposalServer interface {
	OnProposal(context.Context, *OnProposalRequest) (*OnProposalResponse, error)
}

// UnimplementedOnProposalServer can be embedded to have forward compatible implementations.
type UnimplementedOnProposalServer struct {
}

func (*UnimplementedOnProposalServer) OnProposal(context.Context, *OnProposalRequest) (*OnProposalResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OnProposal not implemented")
}

func RegisterOnProposalServer(s *grpc.Server, srv OnProposalServer) {
	s.RegisterService(&_OnProposal_serviceDesc, srv)
}

func _OnProposal_OnProposal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OnProposalRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OnProposalServer).OnProposal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gagarin.network.api.OnProposal/OnProposal",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OnProposalServer).OnProposal(ctx, req.(*OnProposalRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _OnProposal_serviceDesc = grpc.ServiceDesc{
	ServiceName: "gagarin.network.api.OnProposal",
	HandlerType: (*OnProposalServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "OnProposal",
			Handler:    _OnProposal_OnProposal_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api.proto",
}

// OnVoteReceivedClient is the client API for OnVoteReceived service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type OnVoteReceivedClient interface {
	OnVoteReceived(ctx context.Context, in *OnVoteReceivedRequest, opts ...grpc.CallOption) (*OnVoteReceivedResponse, error)
	OnQCFinished(ctx context.Context, in *OnQCFinishedRequest, opts ...grpc.CallOption) (*OnQCFinishedResponse, error)
}

type onVoteReceivedClient struct {
	cc grpc.ClientConnInterface
}

func NewOnVoteReceivedClient(cc grpc.ClientConnInterface) OnVoteReceivedClient {
	return &onVoteReceivedClient{cc}
}

func (c *onVoteReceivedClient) OnVoteReceived(ctx context.Context, in *OnVoteReceivedRequest, opts ...grpc.CallOption) (*OnVoteReceivedResponse, error) {
	out := new(OnVoteReceivedResponse)
	err := c.cc.Invoke(ctx, "/gagarin.network.api.OnVoteReceived/OnVoteReceived", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *onVoteReceivedClient) OnQCFinished(ctx context.Context, in *OnQCFinishedRequest, opts ...grpc.CallOption) (*OnQCFinishedResponse, error) {
	out := new(OnQCFinishedResponse)
	err := c.cc.Invoke(ctx, "/gagarin.network.api.OnVoteReceived/OnQCFinished", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OnVoteReceivedServer is the server API for OnVoteReceived service.
type OnVoteReceivedServer interface {
	OnVoteReceived(context.Context, *OnVoteReceivedRequest) (*OnVoteReceivedResponse, error)
	OnQCFinished(context.Context, *OnQCFinishedRequest) (*OnQCFinishedResponse, error)
}

// UnimplementedOnVoteReceivedServer can be embedded to have forward compatible implementations.
type UnimplementedOnVoteReceivedServer struct {
}

func (*UnimplementedOnVoteReceivedServer) OnVoteReceived(context.Context, *OnVoteReceivedRequest) (*OnVoteReceivedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OnVoteReceived not implemented")
}
func (*UnimplementedOnVoteReceivedServer) OnQCFinished(context.Context, *OnQCFinishedRequest) (*OnQCFinishedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OnQCFinished not implemented")
}

func RegisterOnVoteReceivedServer(s *grpc.Server, srv OnVoteReceivedServer) {
	s.RegisterService(&_OnVoteReceived_serviceDesc, srv)
}

func _OnVoteReceived_OnVoteReceived_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OnVoteReceivedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OnVoteReceivedServer).OnVoteReceived(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gagarin.network.api.OnVoteReceived/OnVoteReceived",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OnVoteReceivedServer).OnVoteReceived(ctx, req.(*OnVoteReceivedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OnVoteReceived_OnQCFinished_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OnQCFinishedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OnVoteReceivedServer).OnQCFinished(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gagarin.network.api.OnVoteReceived/OnQCFinished",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OnVoteReceivedServer).OnQCFinished(ctx, req.(*OnQCFinishedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _OnVoteReceived_serviceDesc = grpc.ServiceDesc{
	ServiceName: "gagarin.network.api.OnVoteReceived",
	HandlerType: (*OnVoteReceivedServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "OnVoteReceived",
			Handler:    _OnVoteReceived_OnVoteReceived_Handler,
		},
		{
			MethodName: "OnQCFinished",
			Handler:    _OnVoteReceived_OnQCFinished_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api.proto",
}

// OnNewBlockCreatedClient is the client API for OnNewBlockCreated service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type OnNewBlockCreatedClient interface {
	OnNewBlockCreated(ctx context.Context, in *OnNewBlockCreatedRequest, opts ...grpc.CallOption) (*OnNewBlockCreatedResponse, error)
}

type onNewBlockCreatedClient struct {
	cc grpc.ClientConnInterface
}

func NewOnNewBlockCreatedClient(cc grpc.ClientConnInterface) OnNewBlockCreatedClient {
	return &onNewBlockCreatedClient{cc}
}

func (c *onNewBlockCreatedClient) OnNewBlockCreated(ctx context.Context, in *OnNewBlockCreatedRequest, opts ...grpc.CallOption) (*OnNewBlockCreatedResponse, error) {
	out := new(OnNewBlockCreatedResponse)
	err := c.cc.Invoke(ctx, "/gagarin.network.api.OnNewBlockCreated/OnNewBlockCreated", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OnNewBlockCreatedServer is the server API for OnNewBlockCreated service.
type OnNewBlockCreatedServer interface {
	OnNewBlockCreated(context.Context, *OnNewBlockCreatedRequest) (*OnNewBlockCreatedResponse, error)
}

// UnimplementedOnNewBlockCreatedServer can be embedded to have forward compatible implementations.
type UnimplementedOnNewBlockCreatedServer struct {
}

func (*UnimplementedOnNewBlockCreatedServer) OnNewBlockCreated(context.Context, *OnNewBlockCreatedRequest) (*OnNewBlockCreatedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OnNewBlockCreated not implemented")
}

func RegisterOnNewBlockCreatedServer(s *grpc.Server, srv OnNewBlockCreatedServer) {
	s.RegisterService(&_OnNewBlockCreated_serviceDesc, srv)
}

func _OnNewBlockCreated_OnNewBlockCreated_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OnNewBlockCreatedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OnNewBlockCreatedServer).OnNewBlockCreated(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gagarin.network.api.OnNewBlockCreated/OnNewBlockCreated",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OnNewBlockCreatedServer).OnNewBlockCreated(ctx, req.(*OnNewBlockCreatedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _OnNewBlockCreated_serviceDesc = grpc.ServiceDesc{
	ServiceName: "gagarin.network.api.OnNewBlockCreated",
	HandlerType: (*OnNewBlockCreatedServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "OnNewBlockCreated",
			Handler:    _OnNewBlockCreated_OnNewBlockCreated_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api.proto",
}

// OnBlockCommitClient is the client API for OnBlockCommit service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type OnBlockCommitClient interface {
	OnBlockCommit(ctx context.Context, in *OnBlockCommitRequest, opts ...grpc.CallOption) (*OnBlockCommitResponse, error)
}

type onBlockCommitClient struct {
	cc grpc.ClientConnInterface
}

func NewOnBlockCommitClient(cc grpc.ClientConnInterface) OnBlockCommitClient {
	return &onBlockCommitClient{cc}
}

func (c *onBlockCommitClient) OnBlockCommit(ctx context.Context, in *OnBlockCommitRequest, opts ...grpc.CallOption) (*OnBlockCommitResponse, error) {
	out := new(OnBlockCommitResponse)
	err := c.cc.Invoke(ctx, "/gagarin.network.api.OnBlockCommit/OnBlockCommit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OnBlockCommitServer is the server API for OnBlockCommit service.
type OnBlockCommitServer interface {
	OnBlockCommit(context.Context, *OnBlockCommitRequest) (*OnBlockCommitResponse, error)
}

// UnimplementedOnBlockCommitServer can be embedded to have forward compatible implementations.
type UnimplementedOnBlockCommitServer struct {
}

func (*UnimplementedOnBlockCommitServer) OnBlockCommit(context.Context, *OnBlockCommitRequest) (*OnBlockCommitResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OnBlockCommit not implemented")
}

func RegisterOnBlockCommitServer(s *grpc.Server, srv OnBlockCommitServer) {
	s.RegisterService(&_OnBlockCommit_serviceDesc, srv)
}

func _OnBlockCommit_OnBlockCommit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OnBlockCommitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OnBlockCommitServer).OnBlockCommit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gagarin.network.api.OnBlockCommit/OnBlockCommit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OnBlockCommitServer).OnBlockCommit(ctx, req.(*OnBlockCommitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _OnBlockCommit_serviceDesc = grpc.ServiceDesc{
	ServiceName: "gagarin.network.api.OnBlockCommit",
	HandlerType: (*OnBlockCommitServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "OnBlockCommit",
			Handler:    _OnBlockCommit_OnBlockCommit_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api.proto",
}

// OnNextViewClient is the client API for OnNextView service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type OnNextViewClient interface {
	OnNextView(ctx context.Context, in *OnNextViewRequest, opts ...grpc.CallOption) (*OnNextViewResponse, error)
}

type onNextViewClient struct {
	cc grpc.ClientConnInterface
}

func NewOnNextViewClient(cc grpc.ClientConnInterface) OnNextViewClient {
	return &onNextViewClient{cc}
}

func (c *onNextViewClient) OnNextView(ctx context.Context, in *OnNextViewRequest, opts ...grpc.CallOption) (*OnNextViewResponse, error) {
	out := new(OnNextViewResponse)
	err := c.cc.Invoke(ctx, "/gagarin.network.api.OnNextView/OnNextView", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OnNextViewServer is the server API for OnNextView service.
type OnNextViewServer interface {
	OnNextView(context.Context, *OnNextViewRequest) (*OnNextViewResponse, error)
}

// UnimplementedOnNextViewServer can be embedded to have forward compatible implementations.
type UnimplementedOnNextViewServer struct {
}

func (*UnimplementedOnNextViewServer) OnNextView(context.Context, *OnNextViewRequest) (*OnNextViewResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OnNextView not implemented")
}

func RegisterOnNextViewServer(s *grpc.Server, srv OnNextViewServer) {
	s.RegisterService(&_OnNextView_serviceDesc, srv)
}

func _OnNextView_OnNextView_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OnNextViewRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OnNextViewServer).OnNextView(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gagarin.network.api.OnNextView/OnNextView",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OnNextViewServer).OnNextView(ctx, req.(*OnNextViewRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _OnNextView_serviceDesc = grpc.ServiceDesc{
	ServiceName: "gagarin.network.api.OnNextView",
	HandlerType: (*OnNextViewServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "OnNextView",
			Handler:    _OnNextView_OnNextView_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api.proto",
}

// OnNextEpochClient is the client API for OnNextEpoch service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type OnNextEpochClient interface {
	OnNextEpoch(ctx context.Context, in *OnNextEpochRequest, opts ...grpc.CallOption) (*OnNextEpochResponse, error)
}

type onNextEpochClient struct {
	cc grpc.ClientConnInterface
}

func NewOnNextEpochClient(cc grpc.ClientConnInterface) OnNextEpochClient {
	return &onNextEpochClient{cc}
}

func (c *onNextEpochClient) OnNextEpoch(ctx context.Context, in *OnNextEpochRequest, opts ...grpc.CallOption) (*OnNextEpochResponse, error) {
	out := new(OnNextEpochResponse)
	err := c.cc.Invoke(ctx, "/gagarin.network.api.OnNextEpoch/OnNextEpoch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OnNextEpochServer is the server API for OnNextEpoch service.
type OnNextEpochServer interface {
	OnNextEpoch(context.Context, *OnNextEpochRequest) (*OnNextEpochResponse, error)
}

// UnimplementedOnNextEpochServer can be embedded to have forward compatible implementations.
type UnimplementedOnNextEpochServer struct {
}

func (*UnimplementedOnNextEpochServer) OnNextEpoch(context.Context, *OnNextEpochRequest) (*OnNextEpochResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OnNextEpoch not implemented")
}

func RegisterOnNextEpochServer(s *grpc.Server, srv OnNextEpochServer) {
	s.RegisterService(&_OnNextEpoch_serviceDesc, srv)
}

func _OnNextEpoch_OnNextEpoch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OnNextEpochRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OnNextEpochServer).OnNextEpoch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gagarin.network.api.OnNextEpoch/OnNextEpoch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OnNextEpochServer).OnNextEpoch(ctx, req.(*OnNextEpochRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _OnNextEpoch_serviceDesc = grpc.ServiceDesc{
	ServiceName: "gagarin.network.api.OnNextEpoch",
	HandlerType: (*OnNextEpochServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "OnNextEpoch",
			Handler:    _OnNextEpoch_OnNextEpoch_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api.proto",
}

// CommonServiceClient is the client API for CommonService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CommonServiceClient interface {
	GetBlockByHash(ctx context.Context, in *GetBlockByHashRequest, opts ...grpc.CallOption) (*GetBlockByHashResponse, error)
	GetBlocksByHeight(ctx context.Context, in *GetBlockByHeightRequest, opts ...grpc.CallOption) (*GetBlockByHeightResponse, error)
	GetFork(ctx context.Context, in *GetForkRequest, opts ...grpc.CallOption) (*GetForkResponse, error)
	Contains(ctx context.Context, in *ContainsRequest, opts ...grpc.CallOption) (*ContainsResponse, error)
	GetThreeChain(ctx context.Context, in *GetThreeChainRequest, opts ...grpc.CallOption) (*GetThreeChainResponse, error)
	GetHead(ctx context.Context, in *GetHeadRequest, opts ...grpc.CallOption) (*GetHeadResponse, error)
	GetTopHeight(ctx context.Context, in *GetTopHeightRequest, opts ...grpc.CallOption) (*GetTopHeightResponse, error)
	GetTopHeightBlock(ctx context.Context, in *GetTopHeightBlockRequest, opts ...grpc.CallOption) (*GetTopHeightBlockResponse, error)
	GetGenesisBlock(ctx context.Context, in *GetGenesisBlockRequest, opts ...grpc.CallOption) (*GetGenesisBlockResponse, error)
	IsSibling(ctx context.Context, in *IsSiblingRequest, opts ...grpc.CallOption) (*IsSiblingResponse, error)
	GetAccount(ctx context.Context, in *GetAccountRequest, opts ...grpc.CallOption) (*GetAccountResponse, error)
	GetTransaction(ctx context.Context, in *GetTransactionRequest, opts ...grpc.CallOption) (*GetTransactionResponse, error)
	GetProposerForView(ctx context.Context, in *GetProposerForViewRequest, opts ...grpc.CallOption) (*GetProposerForViewResponse, error)
	GetCommittee(ctx context.Context, in *GetCommitteeRequest, opts ...grpc.CallOption) (*GetCommitteeResponse, error)
	GetCurrentView(ctx context.Context, in *GetCurrentViewRequest, opts ...grpc.CallOption) (*GetCurrentViewResponse, error)
	GetCurrentEpoch(ctx context.Context, in *GetCurrentEpochRequest, opts ...grpc.CallOption) (*GetCurrentEpochResponse, error)
	GetTopCommittedBlock(ctx context.Context, in *GetTopCommittedBlockRequest, opts ...grpc.CallOption) (*GetTopCommittedBlockResponse, error)
	ExecuteTransaction(ctx context.Context, in *ExecuteTransactionRequest, opts ...grpc.CallOption) (*ExecuteTransactionResponse, error)
}

type commonServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCommonServiceClient(cc grpc.ClientConnInterface) CommonServiceClient {
	return &commonServiceClient{cc}
}

func (c *commonServiceClient) GetBlockByHash(ctx context.Context, in *GetBlockByHashRequest, opts ...grpc.CallOption) (*GetBlockByHashResponse, error) {
	out := new(GetBlockByHashResponse)
	err := c.cc.Invoke(ctx, "/gagarin.network.api.CommonService/GetBlockByHash", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commonServiceClient) GetBlocksByHeight(ctx context.Context, in *GetBlockByHeightRequest, opts ...grpc.CallOption) (*GetBlockByHeightResponse, error) {
	out := new(GetBlockByHeightResponse)
	err := c.cc.Invoke(ctx, "/gagarin.network.api.CommonService/GetBlocksByHeight", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commonServiceClient) GetFork(ctx context.Context, in *GetForkRequest, opts ...grpc.CallOption) (*GetForkResponse, error) {
	out := new(GetForkResponse)
	err := c.cc.Invoke(ctx, "/gagarin.network.api.CommonService/GetFork", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commonServiceClient) Contains(ctx context.Context, in *ContainsRequest, opts ...grpc.CallOption) (*ContainsResponse, error) {
	out := new(ContainsResponse)
	err := c.cc.Invoke(ctx, "/gagarin.network.api.CommonService/Contains", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commonServiceClient) GetThreeChain(ctx context.Context, in *GetThreeChainRequest, opts ...grpc.CallOption) (*GetThreeChainResponse, error) {
	out := new(GetThreeChainResponse)
	err := c.cc.Invoke(ctx, "/gagarin.network.api.CommonService/GetThreeChain", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commonServiceClient) GetHead(ctx context.Context, in *GetHeadRequest, opts ...grpc.CallOption) (*GetHeadResponse, error) {
	out := new(GetHeadResponse)
	err := c.cc.Invoke(ctx, "/gagarin.network.api.CommonService/GetHead", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commonServiceClient) GetTopHeight(ctx context.Context, in *GetTopHeightRequest, opts ...grpc.CallOption) (*GetTopHeightResponse, error) {
	out := new(GetTopHeightResponse)
	err := c.cc.Invoke(ctx, "/gagarin.network.api.CommonService/GetTopHeight", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commonServiceClient) GetTopHeightBlock(ctx context.Context, in *GetTopHeightBlockRequest, opts ...grpc.CallOption) (*GetTopHeightBlockResponse, error) {
	out := new(GetTopHeightBlockResponse)
	err := c.cc.Invoke(ctx, "/gagarin.network.api.CommonService/GetTopHeightBlock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commonServiceClient) GetGenesisBlock(ctx context.Context, in *GetGenesisBlockRequest, opts ...grpc.CallOption) (*GetGenesisBlockResponse, error) {
	out := new(GetGenesisBlockResponse)
	err := c.cc.Invoke(ctx, "/gagarin.network.api.CommonService/GetGenesisBlock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commonServiceClient) IsSibling(ctx context.Context, in *IsSiblingRequest, opts ...grpc.CallOption) (*IsSiblingResponse, error) {
	out := new(IsSiblingResponse)
	err := c.cc.Invoke(ctx, "/gagarin.network.api.CommonService/IsSibling", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commonServiceClient) GetAccount(ctx context.Context, in *GetAccountRequest, opts ...grpc.CallOption) (*GetAccountResponse, error) {
	out := new(GetAccountResponse)
	err := c.cc.Invoke(ctx, "/gagarin.network.api.CommonService/GetAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commonServiceClient) GetTransaction(ctx context.Context, in *GetTransactionRequest, opts ...grpc.CallOption) (*GetTransactionResponse, error) {
	out := new(GetTransactionResponse)
	err := c.cc.Invoke(ctx, "/gagarin.network.api.CommonService/GetTransaction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commonServiceClient) GetProposerForView(ctx context.Context, in *GetProposerForViewRequest, opts ...grpc.CallOption) (*GetProposerForViewResponse, error) {
	out := new(GetProposerForViewResponse)
	err := c.cc.Invoke(ctx, "/gagarin.network.api.CommonService/GetProposerForView", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commonServiceClient) GetCommittee(ctx context.Context, in *GetCommitteeRequest, opts ...grpc.CallOption) (*GetCommitteeResponse, error) {
	out := new(GetCommitteeResponse)
	err := c.cc.Invoke(ctx, "/gagarin.network.api.CommonService/GetCommittee", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commonServiceClient) GetCurrentView(ctx context.Context, in *GetCurrentViewRequest, opts ...grpc.CallOption) (*GetCurrentViewResponse, error) {
	out := new(GetCurrentViewResponse)
	err := c.cc.Invoke(ctx, "/gagarin.network.api.CommonService/GetCurrentView", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commonServiceClient) GetCurrentEpoch(ctx context.Context, in *GetCurrentEpochRequest, opts ...grpc.CallOption) (*GetCurrentEpochResponse, error) {
	out := new(GetCurrentEpochResponse)
	err := c.cc.Invoke(ctx, "/gagarin.network.api.CommonService/GetCurrentEpoch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commonServiceClient) GetTopCommittedBlock(ctx context.Context, in *GetTopCommittedBlockRequest, opts ...grpc.CallOption) (*GetTopCommittedBlockResponse, error) {
	out := new(GetTopCommittedBlockResponse)
	err := c.cc.Invoke(ctx, "/gagarin.network.api.CommonService/GetTopCommittedBlock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commonServiceClient) ExecuteTransaction(ctx context.Context, in *ExecuteTransactionRequest, opts ...grpc.CallOption) (*ExecuteTransactionResponse, error) {
	out := new(ExecuteTransactionResponse)
	err := c.cc.Invoke(ctx, "/gagarin.network.api.CommonService/ExecuteTransaction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CommonServiceServer is the server API for CommonService service.
type CommonServiceServer interface {
	GetBlockByHash(context.Context, *GetBlockByHashRequest) (*GetBlockByHashResponse, error)
	GetBlocksByHeight(context.Context, *GetBlockByHeightRequest) (*GetBlockByHeightResponse, error)
	GetFork(context.Context, *GetForkRequest) (*GetForkResponse, error)
	Contains(context.Context, *ContainsRequest) (*ContainsResponse, error)
	GetThreeChain(context.Context, *GetThreeChainRequest) (*GetThreeChainResponse, error)
	GetHead(context.Context, *GetHeadRequest) (*GetHeadResponse, error)
	GetTopHeight(context.Context, *GetTopHeightRequest) (*GetTopHeightResponse, error)
	GetTopHeightBlock(context.Context, *GetTopHeightBlockRequest) (*GetTopHeightBlockResponse, error)
	GetGenesisBlock(context.Context, *GetGenesisBlockRequest) (*GetGenesisBlockResponse, error)
	IsSibling(context.Context, *IsSiblingRequest) (*IsSiblingResponse, error)
	GetAccount(context.Context, *GetAccountRequest) (*GetAccountResponse, error)
	GetTransaction(context.Context, *GetTransactionRequest) (*GetTransactionResponse, error)
	GetProposerForView(context.Context, *GetProposerForViewRequest) (*GetProposerForViewResponse, error)
	GetCommittee(context.Context, *GetCommitteeRequest) (*GetCommitteeResponse, error)
	GetCurrentView(context.Context, *GetCurrentViewRequest) (*GetCurrentViewResponse, error)
	GetCurrentEpoch(context.Context, *GetCurrentEpochRequest) (*GetCurrentEpochResponse, error)
	GetTopCommittedBlock(context.Context, *GetTopCommittedBlockRequest) (*GetTopCommittedBlockResponse, error)
	ExecuteTransaction(context.Context, *ExecuteTransactionRequest) (*ExecuteTransactionResponse, error)
}

// UnimplementedCommonServiceServer can be embedded to have forward compatible implementations.
type UnimplementedCommonServiceServer struct {
}

func (*UnimplementedCommonServiceServer) GetBlockByHash(context.Context, *GetBlockByHashRequest) (*GetBlockByHashResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBlockByHash not implemented")
}
func (*UnimplementedCommonServiceServer) GetBlocksByHeight(context.Context, *GetBlockByHeightRequest) (*GetBlockByHeightResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBlocksByHeight not implemented")
}
func (*UnimplementedCommonServiceServer) GetFork(context.Context, *GetForkRequest) (*GetForkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFork not implemented")
}
func (*UnimplementedCommonServiceServer) Contains(context.Context, *ContainsRequest) (*ContainsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Contains not implemented")
}
func (*UnimplementedCommonServiceServer) GetThreeChain(context.Context, *GetThreeChainRequest) (*GetThreeChainResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetThreeChain not implemented")
}
func (*UnimplementedCommonServiceServer) GetHead(context.Context, *GetHeadRequest) (*GetHeadResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHead not implemented")
}
func (*UnimplementedCommonServiceServer) GetTopHeight(context.Context, *GetTopHeightRequest) (*GetTopHeightResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTopHeight not implemented")
}
func (*UnimplementedCommonServiceServer) GetTopHeightBlock(context.Context, *GetTopHeightBlockRequest) (*GetTopHeightBlockResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTopHeightBlock not implemented")
}
func (*UnimplementedCommonServiceServer) GetGenesisBlock(context.Context, *GetGenesisBlockRequest) (*GetGenesisBlockResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGenesisBlock not implemented")
}
func (*UnimplementedCommonServiceServer) IsSibling(context.Context, *IsSiblingRequest) (*IsSiblingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsSibling not implemented")
}
func (*UnimplementedCommonServiceServer) GetAccount(context.Context, *GetAccountRequest) (*GetAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAccount not implemented")
}
func (*UnimplementedCommonServiceServer) GetTransaction(context.Context, *GetTransactionRequest) (*GetTransactionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTransaction not implemented")
}
func (*UnimplementedCommonServiceServer) GetProposerForView(context.Context, *GetProposerForViewRequest) (*GetProposerForViewResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProposerForView not implemented")
}
func (*UnimplementedCommonServiceServer) GetCommittee(context.Context, *GetCommitteeRequest) (*GetCommitteeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCommittee not implemented")
}
func (*UnimplementedCommonServiceServer) GetCurrentView(context.Context, *GetCurrentViewRequest) (*GetCurrentViewResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCurrentView not implemented")
}
func (*UnimplementedCommonServiceServer) GetCurrentEpoch(context.Context, *GetCurrentEpochRequest) (*GetCurrentEpochResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCurrentEpoch not implemented")
}
func (*UnimplementedCommonServiceServer) GetTopCommittedBlock(context.Context, *GetTopCommittedBlockRequest) (*GetTopCommittedBlockResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTopCommittedBlock not implemented")
}
func (*UnimplementedCommonServiceServer) ExecuteTransaction(context.Context, *ExecuteTransactionRequest) (*ExecuteTransactionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExecuteTransaction not implemented")
}

func RegisterCommonServiceServer(s *grpc.Server, srv CommonServiceServer) {
	s.RegisterService(&_CommonService_serviceDesc, srv)
}

func _CommonService_GetBlockByHash_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBlockByHashRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommonServiceServer).GetBlockByHash(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gagarin.network.api.CommonService/GetBlockByHash",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommonServiceServer).GetBlockByHash(ctx, req.(*GetBlockByHashRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommonService_GetBlocksByHeight_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBlockByHeightRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommonServiceServer).GetBlocksByHeight(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gagarin.network.api.CommonService/GetBlocksByHeight",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommonServiceServer).GetBlocksByHeight(ctx, req.(*GetBlockByHeightRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommonService_GetFork_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetForkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommonServiceServer).GetFork(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gagarin.network.api.CommonService/GetFork",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommonServiceServer).GetFork(ctx, req.(*GetForkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommonService_Contains_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ContainsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommonServiceServer).Contains(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gagarin.network.api.CommonService/Contains",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommonServiceServer).Contains(ctx, req.(*ContainsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommonService_GetThreeChain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetThreeChainRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommonServiceServer).GetThreeChain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gagarin.network.api.CommonService/GetThreeChain",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommonServiceServer).GetThreeChain(ctx, req.(*GetThreeChainRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommonService_GetHead_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetHeadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommonServiceServer).GetHead(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gagarin.network.api.CommonService/GetHead",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommonServiceServer).GetHead(ctx, req.(*GetHeadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommonService_GetTopHeight_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTopHeightRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommonServiceServer).GetTopHeight(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gagarin.network.api.CommonService/GetTopHeight",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommonServiceServer).GetTopHeight(ctx, req.(*GetTopHeightRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommonService_GetTopHeightBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTopHeightBlockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommonServiceServer).GetTopHeightBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gagarin.network.api.CommonService/GetTopHeightBlock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommonServiceServer).GetTopHeightBlock(ctx, req.(*GetTopHeightBlockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommonService_GetGenesisBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGenesisBlockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommonServiceServer).GetGenesisBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gagarin.network.api.CommonService/GetGenesisBlock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommonServiceServer).GetGenesisBlock(ctx, req.(*GetGenesisBlockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommonService_IsSibling_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IsSiblingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommonServiceServer).IsSibling(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gagarin.network.api.CommonService/IsSibling",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommonServiceServer).IsSibling(ctx, req.(*IsSiblingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommonService_GetAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommonServiceServer).GetAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gagarin.network.api.CommonService/GetAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommonServiceServer).GetAccount(ctx, req.(*GetAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommonService_GetTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTransactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommonServiceServer).GetTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gagarin.network.api.CommonService/GetTransaction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommonServiceServer).GetTransaction(ctx, req.(*GetTransactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommonService_GetProposerForView_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProposerForViewRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommonServiceServer).GetProposerForView(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gagarin.network.api.CommonService/GetProposerForView",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommonServiceServer).GetProposerForView(ctx, req.(*GetProposerForViewRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommonService_GetCommittee_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCommitteeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommonServiceServer).GetCommittee(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gagarin.network.api.CommonService/GetCommittee",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommonServiceServer).GetCommittee(ctx, req.(*GetCommitteeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommonService_GetCurrentView_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCurrentViewRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommonServiceServer).GetCurrentView(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gagarin.network.api.CommonService/GetCurrentView",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommonServiceServer).GetCurrentView(ctx, req.(*GetCurrentViewRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommonService_GetCurrentEpoch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCurrentEpochRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommonServiceServer).GetCurrentEpoch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gagarin.network.api.CommonService/GetCurrentEpoch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommonServiceServer).GetCurrentEpoch(ctx, req.(*GetCurrentEpochRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommonService_GetTopCommittedBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTopCommittedBlockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommonServiceServer).GetTopCommittedBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gagarin.network.api.CommonService/GetTopCommittedBlock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommonServiceServer).GetTopCommittedBlock(ctx, req.(*GetTopCommittedBlockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommonService_ExecuteTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExecuteTransactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommonServiceServer).ExecuteTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gagarin.network.api.CommonService/ExecuteTransaction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommonServiceServer).ExecuteTransaction(ctx, req.(*ExecuteTransactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _CommonService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "gagarin.network.api.CommonService",
	HandlerType: (*CommonServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetBlockByHash",
			Handler:    _CommonService_GetBlockByHash_Handler,
		},
		{
			MethodName: "GetBlocksByHeight",
			Handler:    _CommonService_GetBlocksByHeight_Handler,
		},
		{
			MethodName: "GetFork",
			Handler:    _CommonService_GetFork_Handler,
		},
		{
			MethodName: "Contains",
			Handler:    _CommonService_Contains_Handler,
		},
		{
			MethodName: "GetThreeChain",
			Handler:    _CommonService_GetThreeChain_Handler,
		},
		{
			MethodName: "GetHead",
			Handler:    _CommonService_GetHead_Handler,
		},
		{
			MethodName: "GetTopHeight",
			Handler:    _CommonService_GetTopHeight_Handler,
		},
		{
			MethodName: "GetTopHeightBlock",
			Handler:    _CommonService_GetTopHeightBlock_Handler,
		},
		{
			MethodName: "GetGenesisBlock",
			Handler:    _CommonService_GetGenesisBlock_Handler,
		},
		{
			MethodName: "IsSibling",
			Handler:    _CommonService_IsSibling_Handler,
		},
		{
			MethodName: "GetAccount",
			Handler:    _CommonService_GetAccount_Handler,
		},
		{
			MethodName: "GetTransaction",
			Handler:    _CommonService_GetTransaction_Handler,
		},
		{
			MethodName: "GetProposerForView",
			Handler:    _CommonService_GetProposerForView_Handler,
		},
		{
			MethodName: "GetCommittee",
			Handler:    _CommonService_GetCommittee_Handler,
		},
		{
			MethodName: "GetCurrentView",
			Handler:    _CommonService_GetCurrentView_Handler,
		},
		{
			MethodName: "GetCurrentEpoch",
			Handler:    _CommonService_GetCurrentEpoch_Handler,
		},
		{
			MethodName: "GetTopCommittedBlock",
			Handler:    _CommonService_GetTopCommittedBlock_Handler,
		},
		{
			MethodName: "ExecuteTransaction",
			Handler:    _CommonService_ExecuteTransaction_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api.proto",
}
