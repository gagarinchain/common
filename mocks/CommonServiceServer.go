// Code generated by mockery v2.0.0-alpha.2. DO NOT EDIT.

package mocks

import (
	context "context"

	pb "github.com/gagarinchain/common/protobuff"
	mock "github.com/stretchr/testify/mock"
)

// CommonServiceServer is an autogenerated mock type for the CommonServiceServer type
type CommonServiceServer struct {
	mock.Mock
}

// Contains provides a mock function with given fields: _a0, _a1
func (_m *CommonServiceServer) Contains(_a0 context.Context, _a1 *pb.ContainsRequest) (*pb.ContainsResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *pb.ContainsResponse
	if rf, ok := ret.Get(0).(func(context.Context, *pb.ContainsRequest) *pb.ContainsResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pb.ContainsResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *pb.ContainsRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAccount provides a mock function with given fields: _a0, _a1
func (_m *CommonServiceServer) GetAccount(_a0 context.Context, _a1 *pb.GetAccountRequest) (*pb.GetAccountResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *pb.GetAccountResponse
	if rf, ok := ret.Get(0).(func(context.Context, *pb.GetAccountRequest) *pb.GetAccountResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pb.GetAccountResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *pb.GetAccountRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetBlockByHash provides a mock function with given fields: _a0, _a1
func (_m *CommonServiceServer) GetBlockByHash(_a0 context.Context, _a1 *pb.GetBlockByHashRequest) (*pb.GetBlockByHashResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *pb.GetBlockByHashResponse
	if rf, ok := ret.Get(0).(func(context.Context, *pb.GetBlockByHashRequest) *pb.GetBlockByHashResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pb.GetBlockByHashResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *pb.GetBlockByHashRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetBlocksByHeight provides a mock function with given fields: _a0, _a1
func (_m *CommonServiceServer) GetBlocksByHeight(_a0 context.Context, _a1 *pb.GetBlockByHeightRequest) (*pb.GetBlockByHeightResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *pb.GetBlockByHeightResponse
	if rf, ok := ret.Get(0).(func(context.Context, *pb.GetBlockByHeightRequest) *pb.GetBlockByHeightResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pb.GetBlockByHeightResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *pb.GetBlockByHeightRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCommittee provides a mock function with given fields: _a0, _a1
func (_m *CommonServiceServer) GetCommittee(_a0 context.Context, _a1 *pb.GetCommitteeRequest) (*pb.GetCommitteeResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *pb.GetCommitteeResponse
	if rf, ok := ret.Get(0).(func(context.Context, *pb.GetCommitteeRequest) *pb.GetCommitteeResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pb.GetCommitteeResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *pb.GetCommitteeRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCurrentEpoch provides a mock function with given fields: _a0, _a1
func (_m *CommonServiceServer) GetCurrentEpoch(_a0 context.Context, _a1 *pb.GetCurrentEpochRequest) (*pb.GetCurrentEpochResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *pb.GetCurrentEpochResponse
	if rf, ok := ret.Get(0).(func(context.Context, *pb.GetCurrentEpochRequest) *pb.GetCurrentEpochResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pb.GetCurrentEpochResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *pb.GetCurrentEpochRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCurrentView provides a mock function with given fields: _a0, _a1
func (_m *CommonServiceServer) GetCurrentView(_a0 context.Context, _a1 *pb.GetCurrentViewRequest) (*pb.GetCurrentViewResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *pb.GetCurrentViewResponse
	if rf, ok := ret.Get(0).(func(context.Context, *pb.GetCurrentViewRequest) *pb.GetCurrentViewResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pb.GetCurrentViewResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *pb.GetCurrentViewRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetFork provides a mock function with given fields: _a0, _a1
func (_m *CommonServiceServer) GetFork(_a0 context.Context, _a1 *pb.GetForkRequest) (*pb.GetForkResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *pb.GetForkResponse
	if rf, ok := ret.Get(0).(func(context.Context, *pb.GetForkRequest) *pb.GetForkResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pb.GetForkResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *pb.GetForkRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetGenesisBlock provides a mock function with given fields: _a0, _a1
func (_m *CommonServiceServer) GetGenesisBlock(_a0 context.Context, _a1 *pb.GetGenesisBlockRequest) (*pb.GetGenesisBlockResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *pb.GetGenesisBlockResponse
	if rf, ok := ret.Get(0).(func(context.Context, *pb.GetGenesisBlockRequest) *pb.GetGenesisBlockResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pb.GetGenesisBlockResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *pb.GetGenesisBlockRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetHead provides a mock function with given fields: _a0, _a1
func (_m *CommonServiceServer) GetHead(_a0 context.Context, _a1 *pb.GetHeadRequest) (*pb.GetHeadResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *pb.GetHeadResponse
	if rf, ok := ret.Get(0).(func(context.Context, *pb.GetHeadRequest) *pb.GetHeadResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pb.GetHeadResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *pb.GetHeadRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetProposerForView provides a mock function with given fields: _a0, _a1
func (_m *CommonServiceServer) GetProposerForView(_a0 context.Context, _a1 *pb.GetProposerForViewRequest) (*pb.GetProposerForViewResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *pb.GetProposerForViewResponse
	if rf, ok := ret.Get(0).(func(context.Context, *pb.GetProposerForViewRequest) *pb.GetProposerForViewResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pb.GetProposerForViewResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *pb.GetProposerForViewRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetThreeChain provides a mock function with given fields: _a0, _a1
func (_m *CommonServiceServer) GetThreeChain(_a0 context.Context, _a1 *pb.GetThreeChainRequest) (*pb.GetThreeChainResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *pb.GetThreeChainResponse
	if rf, ok := ret.Get(0).(func(context.Context, *pb.GetThreeChainRequest) *pb.GetThreeChainResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pb.GetThreeChainResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *pb.GetThreeChainRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTopCommittedBlock provides a mock function with given fields: _a0, _a1
func (_m *CommonServiceServer) GetTopCommittedBlock(_a0 context.Context, _a1 *pb.GetTopCommittedBlockRequest) (*pb.GetTopCommittedBlockResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *pb.GetTopCommittedBlockResponse
	if rf, ok := ret.Get(0).(func(context.Context, *pb.GetTopCommittedBlockRequest) *pb.GetTopCommittedBlockResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pb.GetTopCommittedBlockResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *pb.GetTopCommittedBlockRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTopHeight provides a mock function with given fields: _a0, _a1
func (_m *CommonServiceServer) GetTopHeight(_a0 context.Context, _a1 *pb.GetTopHeightRequest) (*pb.GetTopHeightResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *pb.GetTopHeightResponse
	if rf, ok := ret.Get(0).(func(context.Context, *pb.GetTopHeightRequest) *pb.GetTopHeightResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pb.GetTopHeightResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *pb.GetTopHeightRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTopHeightBlock provides a mock function with given fields: _a0, _a1
func (_m *CommonServiceServer) GetTopHeightBlock(_a0 context.Context, _a1 *pb.GetTopHeightBlockRequest) (*pb.GetTopHeightBlockResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *pb.GetTopHeightBlockResponse
	if rf, ok := ret.Get(0).(func(context.Context, *pb.GetTopHeightBlockRequest) *pb.GetTopHeightBlockResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pb.GetTopHeightBlockResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *pb.GetTopHeightBlockRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTransaction provides a mock function with given fields: _a0, _a1
func (_m *CommonServiceServer) GetTransaction(_a0 context.Context, _a1 *pb.GetTransactionRequest) (*pb.GetTransactionResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *pb.GetTransactionResponse
	if rf, ok := ret.Get(0).(func(context.Context, *pb.GetTransactionRequest) *pb.GetTransactionResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pb.GetTransactionResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *pb.GetTransactionRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IsSibling provides a mock function with given fields: _a0, _a1
func (_m *CommonServiceServer) IsSibling(_a0 context.Context, _a1 *pb.IsSiblingRequest) (*pb.IsSiblingResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *pb.IsSiblingResponse
	if rf, ok := ret.Get(0).(func(context.Context, *pb.IsSiblingRequest) *pb.IsSiblingResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pb.IsSiblingResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *pb.IsSiblingRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
