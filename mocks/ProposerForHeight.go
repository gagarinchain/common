// Code generated by mockery v2.0.0-alpha.2. DO NOT EDIT.

package mocks

import (
	big "math/big"

	common "github.com/gagarinchain/common/eth/common"
	crypto "github.com/gagarinchain/common/eth/crypto"

	gagarinchaincommon "github.com/gagarinchain/common"

	mock "github.com/stretchr/testify/mock"
)

// ProposerForHeight is an autogenerated mock type for the ProposerForHeight type
type ProposerForHeight struct {
	mock.Mock
}

// GetBitmap provides a mock function with given fields: src
func (_m *ProposerForHeight) GetBitmap(src map[common.Address]*crypto.Signature) *big.Int {
	ret := _m.Called(src)

	var r0 *big.Int
	if rf, ok := ret.Get(0).(func(map[common.Address]*crypto.Signature) *big.Int); ok {
		r0 = rf(src)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*big.Int)
		}
	}

	return r0
}

// GetPeers provides a mock function with given fields:
func (_m *ProposerForHeight) GetPeers() []*gagarinchaincommon.Peer {
	ret := _m.Called()

	var r0 []*gagarinchaincommon.Peer
	if rf, ok := ret.Get(0).(func() []*gagarinchaincommon.Peer); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*gagarinchaincommon.Peer)
		}
	}

	return r0
}

// ProposerForHeight provides a mock function with given fields: blockHeight
func (_m *ProposerForHeight) ProposerForHeight(blockHeight int32) *gagarinchaincommon.Peer {
	ret := _m.Called(blockHeight)

	var r0 *gagarinchaincommon.Peer
	if rf, ok := ret.Get(0).(func(int32) *gagarinchaincommon.Peer); ok {
		r0 = rf(blockHeight)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gagarinchaincommon.Peer)
		}
	}

	return r0
}
