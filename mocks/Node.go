// Code generated by mockery v2.0.0-alpha.2. DO NOT EDIT.

package mocks

import (
	common "github.com/gagarinchain/common/eth/common"
	mock "github.com/stretchr/testify/mock"

	trie "github.com/gagarinchain/common/trie"
)

// Node is an autogenerated mock type for the Node type
type Node struct {
	mock.Mock
}

// CalcHash provides a mock function with given fields:
func (_m *Node) CalcHash() common.Hash {
	ret := _m.Called()

	var r0 common.Hash
	if rf, ok := ret.Get(0).(func() common.Hash); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(common.Hash)
		}
	}

	return r0
}

// Copy provides a mock function with given fields:
func (_m *Node) Copy() trie.Node {
	ret := _m.Called()

	var r0 trie.Node
	if rf, ok := ret.Get(0).(func() trie.Node); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(trie.Node)
		}
	}

	return r0
}

// Hash provides a mock function with given fields:
func (_m *Node) Hash() common.Hash {
	ret := _m.Called()

	var r0 common.Hash
	if rf, ok := ret.Get(0).(func() common.Hash); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(common.Hash)
		}
	}

	return r0
}

// Key provides a mock function with given fields:
func (_m *Node) Key() []byte {
	ret := _m.Called()

	var r0 []byte
	if rf, ok := ret.Get(0).(func() []byte); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	return r0
}
